
Tempmeasure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08003fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000750  20000068  0800400c  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007b8  0800400c  000207b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020c45  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000048e4  00000000  00000000  00040cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f865  00000000  00000000  000455c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014d8  00000000  00000000  00054e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001780  00000000  00000000  00056300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ae7a  00000000  00000000  00057a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007548  00000000  00000000  000628fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00069e42  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003fa0  00000000  00000000  00069ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e8c 	.word	0x08003e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003e8c 	.word	0x08003e8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_InitTick+0x2c>)
{
 8000584:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 f870 	bl	8000674 <HAL_SYSTICK_Config>
 8000594:	4604      	mov	r4, r0
 8000596:	b938      	cbnz	r0, 80005a8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000598:	4602      	mov	r2, r0
 800059a:	4629      	mov	r1, r5
 800059c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a0:	f000 f828 	bl	80005f4 <HAL_NVIC_SetPriority>
 80005a4:	4620      	mov	r0, r4
 80005a6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80005a8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_Init>:
{
 80005b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 f80c 	bl	80005d0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ffe1 	bl	8000580 <HAL_InitTick>
 80005be:	4604      	mov	r4, r0
 80005c0:	b918      	cbnz	r0, 80005ca <HAL_Init+0x1a>
    HAL_MspInit();
 80005c2:	f002 faed 	bl	8002ba0 <HAL_MspInit>
}
 80005c6:	4620      	mov	r0, r4
 80005c8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005ca:	2401      	movs	r4, #1
 80005cc:	e7fb      	b.n	80005c6 <HAL_Init+0x16>
	...

080005d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005d8:	041b      	lsls	r3, r3, #16
 80005da:	0c1b      	lsrs	r3, r3, #16
 80005dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e0:	0200      	lsls	r0, r0, #8
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005ec:	60d3      	str	r3, [r2, #12]
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f6:	b530      	push	{r4, r5, lr}
 80005f8:	68dc      	ldr	r4, [r3, #12]
 80005fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000602:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000604:	2b04      	cmp	r3, #4
 8000606:	bf28      	it	cs
 8000608:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	f04f 0501 	mov.w	r5, #1
 8000610:	fa05 f303 	lsl.w	r3, r5, r3
 8000614:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000618:	bf8c      	ite	hi
 800061a:	3c03      	subhi	r4, #3
 800061c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061e:	4019      	ands	r1, r3
 8000620:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000622:	fa05 f404 	lsl.w	r4, r5, r4
 8000626:	3c01      	subs	r4, #1
 8000628:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800062a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	ea42 0201 	orr.w	r2, r2, r1
 8000630:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	bfaf      	iteee	ge
 8000636:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	f000 000f 	andlt.w	r0, r0, #15
 800063e:	4b06      	ldrlt	r3, [pc, #24]	; (8000658 <HAL_NVIC_SetPriority+0x64>)
 8000640:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	bfa5      	ittet	ge
 8000644:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000648:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00
 8000658:	e000ed14 	.word	0xe000ed14

0800065c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800065c:	0942      	lsrs	r2, r0, #5
 800065e:	2301      	movs	r3, #1
 8000660:	f000 001f 	and.w	r0, r0, #31
 8000664:	fa03 f000 	lsl.w	r0, r3, r0
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_NVIC_EnableIRQ+0x14>)
 800066a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100

08000674 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000674:	3801      	subs	r0, #1
 8000676:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067a:	d20a      	bcs.n	8000692 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000680:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	21f0      	movs	r1, #240	; 0xf0
 8000684:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000688:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800068c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000692:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e010 	.word	0xe000e010
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <DFSDM_GetChannelFromInstance+0x54>)
 80006a2:	4298      	cmp	r0, r3
 80006a4:	d017      	beq.n	80006d6 <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 80006a6:	3320      	adds	r3, #32
 80006a8:	4298      	cmp	r0, r3
 80006aa:	d016      	beq.n	80006da <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 80006ac:	3320      	adds	r3, #32
 80006ae:	4298      	cmp	r0, r3
 80006b0:	d015      	beq.n	80006de <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 80006b2:	3320      	adds	r3, #32
 80006b4:	4298      	cmp	r0, r3
 80006b6:	d014      	beq.n	80006e2 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80006b8:	3320      	adds	r3, #32
 80006ba:	4298      	cmp	r0, r3
 80006bc:	d013      	beq.n	80006e6 <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 80006be:	3320      	adds	r3, #32
 80006c0:	4298      	cmp	r0, r3
 80006c2:	d012      	beq.n	80006ea <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 80006c4:	3320      	adds	r3, #32
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d011      	beq.n	80006ee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 80006ca:	3320      	adds	r3, #32
 80006cc:	4298      	cmp	r0, r3
 80006ce:	bf0c      	ite	eq
 80006d0:	2007      	moveq	r0, #7
 80006d2:	2000      	movne	r0, #0
 80006d4:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 80006d6:	2000      	movs	r0, #0
 80006d8:	4770      	bx	lr
    channel = 1;
 80006da:	2001      	movs	r0, #1
 80006dc:	4770      	bx	lr
    channel = 2;
 80006de:	2002      	movs	r0, #2
 80006e0:	4770      	bx	lr
    channel = 3;
 80006e2:	2003      	movs	r0, #3
 80006e4:	4770      	bx	lr
    channel = 4;
 80006e6:	2004      	movs	r0, #4
 80006e8:	4770      	bx	lr
    channel = 5;
 80006ea:	2005      	movs	r0, #5
 80006ec:	4770      	bx	lr
    channel = 6;
 80006ee:	2006      	movs	r0, #6
  }

  return channel;
}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40016000 	.word	0x40016000

080006f8 <HAL_DFSDM_ChannelInit>:
{
 80006f8:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 80006fa:	4604      	mov	r4, r0
 80006fc:	2800      	cmp	r0, #0
 80006fe:	d067      	beq.n	80007d0 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000700:	6800      	ldr	r0, [r0, #0]
 8000702:	4d34      	ldr	r5, [pc, #208]	; (80007d4 <HAL_DFSDM_ChannelInit+0xdc>)
 8000704:	f7ff ffcc 	bl	80006a0 <DFSDM_GetChannelFromInstance>
 8000708:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d15f      	bne.n	80007d0 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000710:	4620      	mov	r0, r4
 8000712:	f001 fe4b 	bl	80023ac <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <HAL_DFSDM_ChannelInit+0xe0>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	3201      	adds	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d119      	bne.n	8000758 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <HAL_DFSDM_ChannelInit+0xe4>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800072c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	68a1      	ldr	r1, [r4, #8]
 8000732:	430a      	orrs	r2, r1
 8000734:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800073c:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800073e:	7922      	ldrb	r2, [r4, #4]
 8000740:	2a01      	cmp	r2, #1
 8000742:	d105      	bne.n	8000750 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000744:	68e1      	ldr	r1, [r4, #12]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	3901      	subs	r1, #1
 800074a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800074e:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000756:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000758:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800075a:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800075c:	6803      	ldr	r3, [r0, #0]
 800075e:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8000762:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000764:	6923      	ldr	r3, [r4, #16]
 8000766:	6802      	ldr	r2, [r0, #0]
 8000768:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 800076a:	69a1      	ldr	r1, [r4, #24]
 800076c:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800076e:	4313      	orrs	r3, r2
 8000770:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000772:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000774:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000776:	f023 030f 	bic.w	r3, r3, #15
 800077a:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800077c:	69e3      	ldr	r3, [r4, #28]
 800077e:	6802      	ldr	r2, [r0, #0]
 8000780:	430b      	orrs	r3, r1
 8000782:	4313      	orrs	r3, r2
 8000784:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000786:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000788:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800078a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800078c:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8000790:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000792:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000794:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000796:	430b      	orrs	r3, r1
 8000798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800079c:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800079e:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80007a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80007a8:	6843      	ldr	r3, [r0, #4]
 80007aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80007b4:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80007b6:	6803      	ldr	r3, [r0, #0]
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80007be:	2301      	movs	r3, #1
 80007c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80007c4:	f7ff ff6c 	bl	80006a0 <DFSDM_GetChannelFromInstance>
 80007c8:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 80007cc:	2000      	movs	r0, #0
 80007ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
}
 80007d2:	bd38      	pop	{r3, r4, r5, pc}
 80007d4:	20000084 	.word	0x20000084
 80007d8:	200000a4 	.word	0x200000a4
 80007dc:	40016000 	.word	0x40016000

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000994 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80007ec:	4c67      	ldr	r4, [pc, #412]	; (800098c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ee:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80007f0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f2:	9a01      	ldr	r2, [sp, #4]
 80007f4:	40da      	lsrs	r2, r3
 80007f6:	d102      	bne.n	80007fe <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80007f8:	b005      	add	sp, #20
 80007fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007fe:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000800:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000802:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000804:	ea12 0e06 	ands.w	lr, r2, r6
 8000808:	f000 80b1 	beq.w	800096e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080c:	684a      	ldr	r2, [r1, #4]
 800080e:	f022 0710 	bic.w	r7, r2, #16
 8000812:	2f02      	cmp	r7, #2
 8000814:	d116      	bne.n	8000844 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000816:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800081a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800081e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000822:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000826:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800082a:	f04f 0c0f 	mov.w	ip, #15
 800082e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000832:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000836:	690d      	ldr	r5, [r1, #16]
 8000838:	fa05 f50a 	lsl.w	r5, r5, sl
 800083c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000840:	f8c9 5020 	str.w	r5, [r9, #32]
 8000844:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000848:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800084a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800084e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000852:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000854:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000858:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800085c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000860:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000862:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000866:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000868:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086c:	d811      	bhi.n	8000892 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800086e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000870:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000874:	68cf      	ldr	r7, [r1, #12]
 8000876:	fa07 f70c 	lsl.w	r7, r7, ip
 800087a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800087e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000880:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000882:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000886:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800088a:	409f      	lsls	r7, r3
 800088c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000890:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000892:	f1ba 0f03 	cmp.w	sl, #3
 8000896:	d107      	bne.n	80008a8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000898:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800089a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800089e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80008a2:	409f      	lsls	r7, r3
 80008a4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80008a6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80008a8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008aa:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ac:	688e      	ldr	r6, [r1, #8]
 80008ae:	fa06 f60c 	lsl.w	r6, r6, ip
 80008b2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80008b4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008b6:	00d5      	lsls	r5, r2, #3
 80008b8:	d559      	bpl.n	800096e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80008be:	f045 0501 	orr.w	r5, r5, #1
 80008c2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80008c6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80008ca:	f023 0603 	bic.w	r6, r3, #3
 80008ce:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80008d2:	f005 0501 	and.w	r5, r5, #1
 80008d6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80008da:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008dc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e0:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80008e2:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80008e8:	270f      	movs	r7, #15
 80008ea:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008ee:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008f2:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008f6:	d03c      	beq.n	8000972 <HAL_GPIO_Init+0x192>
 80008f8:	4d25      	ldr	r5, [pc, #148]	; (8000990 <HAL_GPIO_Init+0x1b0>)
 80008fa:	42a8      	cmp	r0, r5
 80008fc:	d03b      	beq.n	8000976 <HAL_GPIO_Init+0x196>
 80008fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000902:	42a8      	cmp	r0, r5
 8000904:	d039      	beq.n	800097a <HAL_GPIO_Init+0x19a>
 8000906:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800090a:	42a8      	cmp	r0, r5
 800090c:	d037      	beq.n	800097e <HAL_GPIO_Init+0x19e>
 800090e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000912:	42a8      	cmp	r0, r5
 8000914:	d035      	beq.n	8000982 <HAL_GPIO_Init+0x1a2>
 8000916:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800091a:	42a8      	cmp	r0, r5
 800091c:	d033      	beq.n	8000986 <HAL_GPIO_Init+0x1a6>
 800091e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000922:	42a8      	cmp	r0, r5
 8000924:	bf14      	ite	ne
 8000926:	2507      	movne	r5, #7
 8000928:	2506      	moveq	r5, #6
 800092a:	fa05 f50c 	lsl.w	r5, r5, ip
 800092e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000930:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000932:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000934:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000938:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800093a:	bf54      	ite	pl
 800093c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800093e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000942:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000944:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000946:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000948:	bf54      	ite	pl
 800094a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800094c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000950:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000952:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000954:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000956:	bf54      	ite	pl
 8000958:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800095a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800095e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000960:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000962:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000964:	bf54      	ite	pl
 8000966:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000968:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 800096c:	60e5      	str	r5, [r4, #12]
    position++;
 800096e:	3301      	adds	r3, #1
 8000970:	e73f      	b.n	80007f2 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000972:	2500      	movs	r5, #0
 8000974:	e7d9      	b.n	800092a <HAL_GPIO_Init+0x14a>
 8000976:	2501      	movs	r5, #1
 8000978:	e7d7      	b.n	800092a <HAL_GPIO_Init+0x14a>
 800097a:	2502      	movs	r5, #2
 800097c:	e7d5      	b.n	800092a <HAL_GPIO_Init+0x14a>
 800097e:	2503      	movs	r5, #3
 8000980:	e7d3      	b.n	800092a <HAL_GPIO_Init+0x14a>
 8000982:	2504      	movs	r5, #4
 8000984:	e7d1      	b.n	800092a <HAL_GPIO_Init+0x14a>
 8000986:	2505      	movs	r5, #5
 8000988:	e7cf      	b.n	800092a <HAL_GPIO_Init+0x14a>
 800098a:	bf00      	nop
 800098c:	40010400 	.word	0x40010400
 8000990:	48000400 	.word	0x48000400
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000998:	b10a      	cbz	r2, 800099e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800099a:	6181      	str	r1, [r0, #24]
 800099c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800099e:	6281      	str	r1, [r0, #40]	; 0x28
 80009a0:	4770      	bx	lr

080009a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a2:	4770      	bx	lr

080009a4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80009a4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80009a8:	6959      	ldr	r1, [r3, #20]
 80009aa:	4201      	tst	r1, r0
 80009ac:	d002      	beq.n	80009b4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009ae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009b0:	f7ff fff7 	bl	80009a2 <HAL_GPIO_EXTI_Callback>
 80009b4:	bd08      	pop	{r3, pc}
 80009b6:	bf00      	nop
 80009b8:	40010400 	.word	0x40010400

080009bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80009bc:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80009be:	4604      	mov	r4, r0
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d04a      	beq.n	8000a5a <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80009c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80009c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009cc:	b91b      	cbnz	r3, 80009d6 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80009ce:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80009d2:	f001 fe9f 	bl	8002714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80009d6:	2324      	movs	r3, #36	; 0x24
 80009d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80009dc:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009de:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f022 0201 	bic.w	r2, r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80009e8:	6862      	ldr	r2, [r4, #4]
 80009ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80009f0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009f2:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80009f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80009fc:	d124      	bne.n	8000a48 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80009fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a02:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a04:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a06:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a08:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a10:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a18:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a1a:	6922      	ldr	r2, [r4, #16]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	69a1      	ldr	r1, [r4, #24]
 8000a20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a26:	6a21      	ldr	r1, [r4, #32]
 8000a28:	69e2      	ldr	r2, [r4, #28]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	f042 0201 	orr.w	r2, r2, #1
 8000a34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a36:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a38:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a3a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a40:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a42:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000a46:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a48:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a4c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a4e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a50:	bf04      	itt	eq
 8000a52:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000a56:	605a      	streq	r2, [r3, #4]
 8000a58:	e7d4      	b.n	8000a04 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
}
 8000a5c:	bd10      	pop	{r4, pc}

08000a5e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a5e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	2a20      	cmp	r2, #32
{
 8000a66:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a68:	d11d      	bne.n	8000aa6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a6a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d019      	beq.n	8000aa6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a72:	2324      	movs	r3, #36	; 0x24
 8000a74:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a78:	6803      	ldr	r3, [r0, #0]
 8000a7a:	681c      	ldr	r4, [r3, #0]
 8000a7c:	f024 0401 	bic.w	r4, r4, #1
 8000a80:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000a88:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a8a:	681c      	ldr	r4, [r3, #0]
 8000a8c:	4321      	orrs	r1, r4
 8000a8e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	f041 0101 	orr.w	r1, r1, #1
 8000a96:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a98:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a9a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000a9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000aa6:	2002      	movs	r0, #2
  }
}
 8000aa8:	bd10      	pop	{r4, pc}

08000aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000aaa:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aac:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000ab0:	b2e4      	uxtb	r4, r4
 8000ab2:	2c20      	cmp	r4, #32
 8000ab4:	d11c      	bne.n	8000af0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ab6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d018      	beq.n	8000af0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000abe:	2324      	movs	r3, #36	; 0x24
 8000ac0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ac4:	6803      	ldr	r3, [r0, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	f022 0201 	bic.w	r2, r2, #1
 8000acc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000ace:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000ad0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ad4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000ad8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	f042 0201 	orr.w	r2, r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ae2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ae4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000ae8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000aec:	4618      	mov	r0, r3
 8000aee:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000af0:	2002      	movs	r0, #2
  }
}
 8000af2:	bd10      	pop	{r4, pc}

08000af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000af8:	4604      	mov	r4, r0
{
 8000afa:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d074      	beq.n	8000bea <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b00:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000b04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b08:	b91b      	cbnz	r3, 8000b12 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b0a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b0e:	f002 fcd5 	bl	80034bc <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b12:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b14:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8000b16:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b1a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8000b1e:	f001 fb34 	bl	800218a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b24:	466e      	mov	r6, sp
 8000b26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b30:	e886 0003 	stmia.w	r6, {r0, r1}
 8000b34:	f104 0804 	add.w	r8, r4, #4
 8000b38:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000b3c:	6820      	ldr	r0, [r4, #0]
 8000b3e:	f001 faf5 	bl	800212c <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b42:	2100      	movs	r1, #0
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	f001 fb26 	bl	8002196 <USB_SetCurrentMode>
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	4623      	mov	r3, r4
 8000b50:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b54:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b56:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8000b58:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b5c:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8000b60:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8000b62:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8000b64:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b68:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b6c:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b6e:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b70:	6518      	str	r0, [r3, #80]	; 0x50
 8000b72:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8000b76:	d1ef      	bne.n	8000b58 <HAL_PCD_Init+0x64>
 8000b78:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b7a:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8000b7c:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8000b80:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8000b82:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8000b84:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b88:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b8c:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b90:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b94:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8000b98:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8000b9c:	d1ee      	bne.n	8000b7c <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	466e      	mov	r6, sp
 8000ba2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ba8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bac:	e886 0003 	stmia.w	r6, {r0, r1}
 8000bb0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000bb4:	6820      	ldr	r0, [r4, #0]
 8000bb6:	f001 fb2f 	bl	8002218 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8000bba:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000bbc:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000bc0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 f80f 	bl	8000bee <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8000bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d102      	bne.n	8000bdc <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f000 f81c 	bl	8000c14 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000bdc:	6820      	ldr	r0, [r4, #0]
 8000bde:	f001 fbb7 	bl	8002350 <USB_DevDisconnect>

  return HAL_OK;
 8000be2:	2000      	movs	r0, #0
}
 8000be4:	b00a      	add	sp, #40	; 0x28
 8000be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000bea:	2001      	movs	r0, #1
 8000bec:	e7fa      	b.n	8000be4 <HAL_PCD_Init+0xf0>

08000bee <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000bee:	6802      	ldr	r2, [r0, #0]
{
 8000bf0:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000bfe:	6993      	ldr	r3, [r2, #24]
 8000c00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c04:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000c06:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	f043 0303 	orr.w	r3, r3, #3
 8000c10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000c12:	4770      	bx	lr

08000c14 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000c14:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8000c1c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8000c24:	2000      	movs	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c28:	4a02      	ldr	r2, [pc, #8]	; (8000c34 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4770      	bx	lr
 8000c34:	40007000 	.word	0x40007000

08000c38 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <HAL_PWREx_GetVoltageRange+0xc>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000c3c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40007000 	.word	0x40007000

08000c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c4a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c50:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c54:	d11c      	bne.n	8000c90 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c56:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000c5a:	d015      	beq.n	8000c88 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c66:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c68:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000c6a:	6811      	ldr	r1, [r2, #0]
 8000c6c:	2232      	movs	r2, #50	; 0x32
 8000c6e:	434a      	muls	r2, r1
 8000c70:	490f      	ldr	r1, [pc, #60]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000c72:	fbb2 f2f1 	udiv	r2, r2, r1
 8000c76:	4619      	mov	r1, r3
 8000c78:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c7a:	6958      	ldr	r0, [r3, #20]
 8000c7c:	0540      	lsls	r0, r0, #21
 8000c7e:	d500      	bpl.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000c80:	b922      	cbnz	r2, 8000c8c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c82:	694b      	ldr	r3, [r1, #20]
 8000c84:	055b      	lsls	r3, r3, #21
 8000c86:	d40d      	bmi.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c88:	2000      	movs	r0, #0
 8000c8a:	4770      	bx	lr
        wait_loop_index--;
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	e7f4      	b.n	8000c7a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c94:	bf1f      	itttt	ne
 8000c96:	681a      	ldrne	r2, [r3, #0]
 8000c98:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000c9c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000ca0:	601a      	strne	r2, [r3, #0]
 8000ca2:	e7f1      	b.n	8000c88 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000ca4:	2003      	movs	r0, #3
}
 8000ca6:	4770      	bx	lr
 8000ca8:	40007000 	.word	0x40007000
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	000f4240 	.word	0x000f4240

08000cb4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8000cb4:	4a02      	ldr	r2, [pc, #8]	; (8000cc0 <HAL_PWREx_EnableVddUSB+0xc>)
 8000cb6:	6853      	ldr	r3, [r2, #4]
 8000cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbc:	6053      	str	r3, [r2, #4]
 8000cbe:	4770      	bx	lr
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8000cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc8:	9d06      	ldr	r5, [sp, #24]
 8000cca:	4604      	mov	r4, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	4616      	mov	r6, r2
 8000cd0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000cd2:	6821      	ldr	r1, [r4, #0]
 8000cd4:	688a      	ldr	r2, [r1, #8]
 8000cd6:	423a      	tst	r2, r7
 8000cd8:	bf14      	ite	ne
 8000cda:	2201      	movne	r2, #1
 8000cdc:	2200      	moveq	r2, #0
 8000cde:	42b2      	cmp	r2, r6
 8000ce0:	d102      	bne.n	8000ce8 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000ce2:	2000      	movs	r0, #0
}
 8000ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ce8:	1c6b      	adds	r3, r5, #1
 8000cea:	d0f3      	beq.n	8000cd4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cec:	f002 f836 	bl	8002d5c <HAL_GetTick>
 8000cf0:	eba0 0008 	sub.w	r0, r0, r8
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	d301      	bcc.n	8000cfc <QSPI_WaitFlagStateUntilTimeout+0x38>
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d1ea      	bne.n	8000cd2 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8000d02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d10 <HAL_QSPI_Init>:
{
 8000d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f002 f822 	bl	8002d5c <HAL_GetTick>
 8000d18:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d049      	beq.n	8000db2 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8000d1e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d047      	beq.n	8000db6 <HAL_QSPI_Init+0xa6>
 8000d26:	2301      	movs	r3, #1
 8000d28:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000d2c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000d30:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8000d34:	b93a      	cbnz	r2, 8000d46 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8000d36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f001 fea0 	bl	8002a80 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8000d40:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d44:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000d46:	6820      	ldr	r0, [r4, #0]
 8000d48:	68a1      	ldr	r1, [r4, #8]
 8000d4a:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000d4e:	3901      	subs	r1, #1
 8000d50:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000d54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d58:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	462b      	mov	r3, r5
 8000d62:	4620      	mov	r0, r4
 8000d64:	f7ff ffae 	bl	8000cc4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8000d68:	b9f0      	cbnz	r0, 8000da8 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8000d6a:	6822      	ldr	r2, [r4, #0]
 8000d6c:	6865      	ldr	r5, [r4, #4]
 8000d6e:	6811      	ldr	r1, [r2, #0]
 8000d70:	68e3      	ldr	r3, [r4, #12]
 8000d72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d76:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8000d7a:	f021 0110 	bic.w	r1, r1, #16
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8000d82:	69a1      	ldr	r1, [r4, #24]
 8000d84:	6963      	ldr	r3, [r4, #20]
 8000d86:	6855      	ldr	r5, [r2, #4]
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	6921      	ldr	r1, [r4, #16]
 8000d8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d90:	490a      	ldr	r1, [pc, #40]	; (8000dbc <HAL_QSPI_Init+0xac>)
 8000d92:	4029      	ands	r1, r5
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8000d98:	6813      	ldr	r3, [r2, #0]
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8000da0:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8000da2:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8000da4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8000da8:	2300      	movs	r3, #0
 8000daa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8000dae:	b003      	add	sp, #12
 8000db0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	e7fb      	b.n	8000dae <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8000db6:	2002      	movs	r0, #2
 8000db8:	e7f9      	b.n	8000dae <HAL_QSPI_Init+0x9e>
 8000dba:	bf00      	nop
 8000dbc:	ffe0f8fe 	.word	0xffe0f8fe

08000dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000dc2:	4d1e      	ldr	r5, [pc, #120]	; (8000e3c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000dc4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000dc6:	00da      	lsls	r2, r3, #3
{
 8000dc8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000dca:	d518      	bpl.n	8000dfe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000dcc:	f7ff ff34 	bl	8000c38 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dd0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000dd4:	d123      	bne.n	8000e1e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000dd6:	2c80      	cmp	r4, #128	; 0x80
 8000dd8:	d929      	bls.n	8000e2e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000dda:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ddc:	bf8c      	ite	hi
 8000dde:	2002      	movhi	r0, #2
 8000de0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	4303      	orrs	r3, r0
 8000dec:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000df4:	1a18      	subs	r0, r3, r0
 8000df6:	bf18      	it	ne
 8000df8:	2001      	movne	r0, #1
 8000dfa:	b003      	add	sp, #12
 8000dfc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000e10:	f7ff ff12 	bl	8000c38 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e14:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e1c:	e7d8      	b.n	8000dd0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000e1e:	2c80      	cmp	r4, #128	; 0x80
 8000e20:	d807      	bhi.n	8000e32 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000e22:	d008      	beq.n	8000e36 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000e24:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000e28:	4258      	negs	r0, r3
 8000e2a:	4158      	adcs	r0, r3
 8000e2c:	e7d9      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000e2e:	2000      	movs	r0, #0
 8000e30:	e7d7      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000e32:	2003      	movs	r0, #3
 8000e34:	e7d5      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000e36:	2002      	movs	r0, #2
 8000e38:	e7d3      	b.n	8000de2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_RCC_GetSysClockFreq+0x98>)
 8000e46:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e48:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e4a:	f012 020c 	ands.w	r2, r2, #12
 8000e4e:	d005      	beq.n	8000e5c <HAL_RCC_GetSysClockFreq+0x18>
 8000e50:	2a0c      	cmp	r2, #12
 8000e52:	d115      	bne.n	8000e80 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e54:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000e58:	2901      	cmp	r1, #1
 8000e5a:	d118      	bne.n	8000e8e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e5c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000e5e:	4820      	ldr	r0, [pc, #128]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e60:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e62:	bf55      	itete	pl
 8000e64:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e68:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e6a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e6e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000e72:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e76:	b382      	cbz	r2, 8000eda <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000e78:	2a0c      	cmp	r2, #12
 8000e7a:	d009      	beq.n	8000e90 <HAL_RCC_GetSysClockFreq+0x4c>
 8000e7c:	2000      	movs	r0, #0
  return sysclockfreq;
 8000e7e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000e80:	2a04      	cmp	r2, #4
 8000e82:	d029      	beq.n	8000ed8 <HAL_RCC_GetSysClockFreq+0x94>
 8000e84:	2a08      	cmp	r2, #8
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e88:	bf18      	it	ne
 8000e8a:	2000      	movne	r0, #0
 8000e8c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000e8e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e90:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e92:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e94:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e98:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000e9c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e9e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000ea2:	d005      	beq.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x6c>
 8000ea4:	2903      	cmp	r1, #3
 8000ea6:	d012      	beq.n	8000ece <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ea8:	68d9      	ldr	r1, [r3, #12]
 8000eaa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000eae:	e003      	b.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000eb0:	68d9      	ldr	r1, [r3, #12]
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000eb4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000eb8:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000eba:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ebe:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000ec2:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ec4:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ec6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000ec8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ecc:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ece:	68d9      	ldr	r1, [r3, #12]
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ed2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000ed6:	e7ef      	b.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000eda:	4770      	bx	lr
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	08003f30 	.word	0x08003f30
 8000ee4:	007a1200 	.word	0x007a1200
 8000ee8:	00f42400 	.word	0x00f42400

08000eec <HAL_RCC_OscConfig>:
{
 8000eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000ef0:	4605      	mov	r5, r0
 8000ef2:	b918      	cbnz	r0, 8000efc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000ef4:	2001      	movs	r0, #1
}
 8000ef6:	b003      	add	sp, #12
 8000ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000efc:	4ca5      	ldr	r4, [pc, #660]	; (8001194 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000efe:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f00:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f02:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f04:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f06:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f0a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f0e:	d53c      	bpl.n	8000f8a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f10:	b11e      	cbz	r6, 8000f1a <HAL_RCC_OscConfig+0x2e>
 8000f12:	2e0c      	cmp	r6, #12
 8000f14:	d163      	bne.n	8000fde <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f16:	2f01      	cmp	r7, #1
 8000f18:	d161      	bne.n	8000fde <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	0798      	lsls	r0, r3, #30
 8000f1e:	d502      	bpl.n	8000f26 <HAL_RCC_OscConfig+0x3a>
 8000f20:	69ab      	ldr	r3, [r5, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0e6      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	6a28      	ldr	r0, [r5, #32]
 8000f2a:	0719      	lsls	r1, r3, #28
 8000f2c:	bf56      	itet	pl
 8000f2e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000f32:	6823      	ldrmi	r3, [r4, #0]
 8000f34:	091b      	lsrpl	r3, r3, #4
 8000f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f3a:	4283      	cmp	r3, r0
 8000f3c:	d23a      	bcs.n	8000fb4 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f3e:	f7ff ff3f 	bl	8000dc0 <RCC_SetFlashLatencyFromMSIRange>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d1d6      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	6a2a      	ldr	r2, [r5, #32]
 8000f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	69ea      	ldr	r2, [r5, #28]
 8000f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f66:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f68:	f7ff ff6c 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8000f6c:	68a3      	ldr	r3, [r4, #8]
 8000f6e:	4a8a      	ldr	r2, [pc, #552]	; (8001198 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	40d8      	lsrs	r0, r3
 8000f7c:	4b87      	ldr	r3, [pc, #540]	; (800119c <HAL_RCC_OscConfig+0x2b0>)
 8000f7e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff fafd 	bl	8000580 <HAL_InitTick>
        if(status != HAL_OK)
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d1b5      	bne.n	8000ef6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	07d8      	lsls	r0, r3, #31
 8000f8e:	d45d      	bmi.n	800104c <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	0799      	lsls	r1, r3, #30
 8000f94:	f100 809c 	bmi.w	80010d0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	0718      	lsls	r0, r3, #28
 8000f9c:	f100 80d0 	bmi.w	8001140 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	0759      	lsls	r1, r3, #29
 8000fa4:	f100 80fc 	bmi.w	80011a0 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 8165 	bne.w	800127a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	e7a0      	b.n	8000ef6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6023      	str	r3, [r4, #0]
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fc2:	4303      	orrs	r3, r0
 8000fc4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc6:	6863      	ldr	r3, [r4, #4]
 8000fc8:	69ea      	ldr	r2, [r5, #28]
 8000fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fd2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd4:	f7ff fef4 	bl	8000dc0 <RCC_SetFlashLatencyFromMSIRange>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d0c5      	beq.n	8000f68 <HAL_RCC_OscConfig+0x7c>
 8000fdc:	e78a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fde:	69ab      	ldr	r3, [r5, #24]
 8000fe0:	b31b      	cbz	r3, 800102a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fea:	f001 feb7 	bl	8002d5c <HAL_GetTick>
 8000fee:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	079a      	lsls	r2, r3, #30
 8000ff4:	d511      	bpl.n	800101a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	6a2a      	ldr	r2, [r5, #32]
 8001002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001006:	4313      	orrs	r3, r2
 8001008:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100a:	6863      	ldr	r3, [r4, #4]
 800100c:	69ea      	ldr	r2, [r5, #28]
 800100e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001016:	6063      	str	r3, [r4, #4]
 8001018:	e7b7      	b.n	8000f8a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800101a:	f001 fe9f 	bl	8002d5c <HAL_GetTick>
 800101e:	eba0 0008 	sub.w	r0, r0, r8
 8001022:	2802      	cmp	r0, #2
 8001024:	d9e4      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001026:	2003      	movs	r0, #3
 8001028:	e765      	b.n	8000ef6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001032:	f001 fe93 	bl	8002d5c <HAL_GetTick>
 8001036:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	079b      	lsls	r3, r3, #30
 800103c:	d5a5      	bpl.n	8000f8a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800103e:	f001 fe8d 	bl	8002d5c <HAL_GetTick>
 8001042:	eba0 0008 	sub.w	r0, r0, r8
 8001046:	2802      	cmp	r0, #2
 8001048:	d9f6      	bls.n	8001038 <HAL_RCC_OscConfig+0x14c>
 800104a:	e7ec      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800104c:	2e08      	cmp	r6, #8
 800104e:	d003      	beq.n	8001058 <HAL_RCC_OscConfig+0x16c>
 8001050:	2e0c      	cmp	r6, #12
 8001052:	d108      	bne.n	8001066 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001054:	2f03      	cmp	r7, #3
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	039a      	lsls	r2, r3, #14
 800105c:	d598      	bpl.n	8000f90 <HAL_RCC_OscConfig+0xa4>
 800105e:	686b      	ldr	r3, [r5, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d195      	bne.n	8000f90 <HAL_RCC_OscConfig+0xa4>
 8001064:	e746      	b.n	8000ef4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	686b      	ldr	r3, [r5, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d110      	bne.n	8001090 <HAL_RCC_OscConfig+0x1a4>
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001074:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001076:	f001 fe71 	bl	8002d5c <HAL_GetTick>
 800107a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	039b      	lsls	r3, r3, #14
 8001080:	d486      	bmi.n	8000f90 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001082:	f001 fe6b 	bl	8002d5c <HAL_GetTick>
 8001086:	eba0 0008 	sub.w	r0, r0, r8
 800108a:	2864      	cmp	r0, #100	; 0x64
 800108c:	d9f6      	bls.n	800107c <HAL_RCC_OscConfig+0x190>
 800108e:	e7ca      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001094:	d104      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6023      	str	r3, [r4, #0]
 800109e:	e7e6      	b.n	800106e <HAL_RCC_OscConfig+0x182>
 80010a0:	6822      	ldr	r2, [r4, #0]
 80010a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010a6:	6022      	str	r2, [r4, #0]
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010ae:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e0      	bne.n	8001076 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80010b4:	f001 fe52 	bl	8002d5c <HAL_GetTick>
 80010b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	0398      	lsls	r0, r3, #14
 80010be:	f57f af67 	bpl.w	8000f90 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c2:	f001 fe4b 	bl	8002d5c <HAL_GetTick>
 80010c6:	eba0 0008 	sub.w	r0, r0, r8
 80010ca:	2864      	cmp	r0, #100	; 0x64
 80010cc:	d9f5      	bls.n	80010ba <HAL_RCC_OscConfig+0x1ce>
 80010ce:	e7aa      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010d0:	2e04      	cmp	r6, #4
 80010d2:	d003      	beq.n	80010dc <HAL_RCC_OscConfig+0x1f0>
 80010d4:	2e0c      	cmp	r6, #12
 80010d6:	d110      	bne.n	80010fa <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80010d8:	2f02      	cmp	r7, #2
 80010da:	d10e      	bne.n	80010fa <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	0559      	lsls	r1, r3, #21
 80010e0:	d503      	bpl.n	80010ea <HAL_RCC_OscConfig+0x1fe>
 80010e2:	68eb      	ldr	r3, [r5, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f43f af05 	beq.w	8000ef4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	6863      	ldr	r3, [r4, #4]
 80010ec:	692a      	ldr	r2, [r5, #16]
 80010ee:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80010f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010f6:	6063      	str	r3, [r4, #4]
 80010f8:	e74e      	b.n	8000f98 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fa:	68eb      	ldr	r3, [r5, #12]
 80010fc:	b17b      	cbz	r3, 800111e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001106:	f001 fe29 	bl	8002d5c <HAL_GetTick>
 800110a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	055a      	lsls	r2, r3, #21
 8001110:	d4eb      	bmi.n	80010ea <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f001 fe23 	bl	8002d5c <HAL_GetTick>
 8001116:	1bc0      	subs	r0, r0, r7
 8001118:	2802      	cmp	r0, #2
 800111a:	d9f7      	bls.n	800110c <HAL_RCC_OscConfig+0x220>
 800111c:	e783      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001124:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001126:	f001 fe19 	bl	8002d5c <HAL_GetTick>
 800112a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	055b      	lsls	r3, r3, #21
 8001130:	f57f af32 	bpl.w	8000f98 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001134:	f001 fe12 	bl	8002d5c <HAL_GetTick>
 8001138:	1bc0      	subs	r0, r0, r7
 800113a:	2802      	cmp	r0, #2
 800113c:	d9f6      	bls.n	800112c <HAL_RCC_OscConfig+0x240>
 800113e:	e772      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001140:	696b      	ldr	r3, [r5, #20]
 8001142:	b19b      	cbz	r3, 800116c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001144:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001150:	f001 fe04 	bl	8002d5c <HAL_GetTick>
 8001154:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001156:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800115a:	079a      	lsls	r2, r3, #30
 800115c:	f53f af20 	bmi.w	8000fa0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001160:	f001 fdfc 	bl	8002d5c <HAL_GetTick>
 8001164:	1bc0      	subs	r0, r0, r7
 8001166:	2802      	cmp	r0, #2
 8001168:	d9f5      	bls.n	8001156 <HAL_RCC_OscConfig+0x26a>
 800116a:	e75c      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 800116c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001178:	f001 fdf0 	bl	8002d5c <HAL_GetTick>
 800117c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800117e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001182:	079b      	lsls	r3, r3, #30
 8001184:	f57f af0c 	bpl.w	8000fa0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f001 fde8 	bl	8002d5c <HAL_GetTick>
 800118c:	1bc0      	subs	r0, r0, r7
 800118e:	2802      	cmp	r0, #2
 8001190:	d9f5      	bls.n	800117e <HAL_RCC_OscConfig+0x292>
 8001192:	e748      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
 8001194:	40021000 	.word	0x40021000
 8001198:	08003f16 	.word	0x08003f16
 800119c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011a2:	00d8      	lsls	r0, r3, #3
 80011a4:	d429      	bmi.n	80011fa <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80011ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011b8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011bc:	4f5d      	ldr	r7, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x448>)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	05d9      	lsls	r1, r3, #23
 80011c2:	d51d      	bpl.n	8001200 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	68ab      	ldr	r3, [r5, #8]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d12b      	bne.n	8001222 <HAL_RCC_OscConfig+0x336>
 80011ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80011d6:	f001 fdc1 	bl	8002d5c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011e4:	079b      	lsls	r3, r3, #30
 80011e6:	d542      	bpl.n	800126e <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 80011e8:	f1b8 0f00 	cmp.w	r8, #0
 80011ec:	f43f aedc 	beq.w	8000fa8 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80011f8:	e6d6      	b.n	8000fa8 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	f04f 0800 	mov.w	r8, #0
 80011fe:	e7dd      	b.n	80011bc <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001208:	f001 fda8 	bl	8002d5c <HAL_GetTick>
 800120c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	05da      	lsls	r2, r3, #23
 8001212:	d4d7      	bmi.n	80011c4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001214:	f001 fda2 	bl	8002d5c <HAL_GetTick>
 8001218:	eba0 0009 	sub.w	r0, r0, r9
 800121c:	2802      	cmp	r0, #2
 800121e:	d9f6      	bls.n	800120e <HAL_RCC_OscConfig+0x322>
 8001220:	e701      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001222:	2b05      	cmp	r3, #5
 8001224:	d106      	bne.n	8001234 <HAL_RCC_OscConfig+0x348>
 8001226:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001232:	e7ca      	b.n	80011ca <HAL_RCC_OscConfig+0x2de>
 8001234:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001238:	f022 0201 	bic.w	r2, r2, #1
 800123c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001240:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001244:	f022 0204 	bic.w	r2, r2, #4
 8001248:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1c2      	bne.n	80011d6 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8001250:	f001 fd84 	bl	8002d5c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001258:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800125a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800125e:	0798      	lsls	r0, r3, #30
 8001260:	d5c2      	bpl.n	80011e8 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f001 fd7b 	bl	8002d5c <HAL_GetTick>
 8001266:	1bc0      	subs	r0, r0, r7
 8001268:	4548      	cmp	r0, r9
 800126a:	d9f6      	bls.n	800125a <HAL_RCC_OscConfig+0x36e>
 800126c:	e6db      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f001 fd75 	bl	8002d5c <HAL_GetTick>
 8001272:	1bc0      	subs	r0, r0, r7
 8001274:	4548      	cmp	r0, r9
 8001276:	d9b3      	bls.n	80011e0 <HAL_RCC_OscConfig+0x2f4>
 8001278:	e6d5      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800127a:	2e0c      	cmp	r6, #12
 800127c:	f43f ae3a 	beq.w	8000ef4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001280:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001288:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800128a:	d137      	bne.n	80012fc <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 800128c:	f001 fd66 	bl	8002d5c <HAL_GetTick>
 8001290:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	0199      	lsls	r1, r3, #6
 8001296:	d42b      	bmi.n	80012f0 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001298:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800129a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800129c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012a0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80012a2:	3a01      	subs	r2, #1
 80012a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80012a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80012aa:	0912      	lsrs	r2, r2, #4
 80012ac:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80012b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80012b2:	0852      	lsrs	r2, r2, #1
 80012b4:	3a01      	subs	r2, #1
 80012b6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80012ba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80012bc:	0852      	lsrs	r2, r2, #1
 80012be:	3a01      	subs	r2, #1
 80012c0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80012c4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012cc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012ce:	68e3      	ldr	r3, [r4, #12]
 80012d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80012d6:	f001 fd41 	bl	8002d5c <HAL_GetTick>
 80012da:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	019a      	lsls	r2, r3, #6
 80012e0:	f53f ae66 	bmi.w	8000fb0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e4:	f001 fd3a 	bl	8002d5c <HAL_GetTick>
 80012e8:	1b40      	subs	r0, r0, r5
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f6      	bls.n	80012dc <HAL_RCC_OscConfig+0x3f0>
 80012ee:	e69a      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f001 fd34 	bl	8002d5c <HAL_GetTick>
 80012f4:	1b80      	subs	r0, r0, r6
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9cb      	bls.n	8001292 <HAL_RCC_OscConfig+0x3a6>
 80012fa:	e694      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001302:	bf02      	ittt	eq
 8001304:	68e3      	ldreq	r3, [r4, #12]
 8001306:	f023 0303 	biceq.w	r3, r3, #3
 800130a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800130c:	68e3      	ldr	r3, [r4, #12]
 800130e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001318:	f001 fd20 	bl	8002d5c <HAL_GetTick>
 800131c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	019b      	lsls	r3, r3, #6
 8001322:	f57f ae45 	bpl.w	8000fb0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f001 fd19 	bl	8002d5c <HAL_GetTick>
 800132a:	1b40      	subs	r0, r0, r5
 800132c:	2802      	cmp	r0, #2
 800132e:	d9f6      	bls.n	800131e <HAL_RCC_OscConfig+0x432>
 8001330:	e679      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
 8001332:	bf00      	nop
 8001334:	40007000 	.word	0x40007000

08001338 <HAL_RCC_ClockConfig>:
{
 8001338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800133e:	4604      	mov	r4, r0
 8001340:	b910      	cbnz	r0, 8001348 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001342:	2001      	movs	r0, #1
 8001344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001348:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_RCC_ClockConfig+0x114>)
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	428b      	cmp	r3, r1
 8001352:	d329      	bcc.n	80013a8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	07d9      	lsls	r1, r3, #31
 8001358:	d431      	bmi.n	80013be <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135a:	6821      	ldr	r1, [r4, #0]
 800135c:	078a      	lsls	r2, r1, #30
 800135e:	d45b      	bmi.n	8001418 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001360:	4a3a      	ldr	r2, [pc, #232]	; (800144c <HAL_RCC_ClockConfig+0x114>)
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	429e      	cmp	r6, r3
 800136a:	d35d      	bcc.n	8001428 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	f011 0f04 	tst.w	r1, #4
 8001370:	4d37      	ldr	r5, [pc, #220]	; (8001450 <HAL_RCC_ClockConfig+0x118>)
 8001372:	d164      	bne.n	800143e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001374:	070b      	lsls	r3, r1, #28
 8001376:	d506      	bpl.n	8001386 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001378:	68ab      	ldr	r3, [r5, #8]
 800137a:	6922      	ldr	r2, [r4, #16]
 800137c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001380:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001384:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001386:	f7ff fd5d 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 800138a:	68ab      	ldr	r3, [r5, #8]
 800138c:	4a31      	ldr	r2, [pc, #196]	; (8001454 <HAL_RCC_ClockConfig+0x11c>)
 800138e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	40d8      	lsrs	r0, r3
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_RCC_ClockConfig+0x120>)
 80013a0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff b8ec 	b.w	8000580 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a8:	6813      	ldr	r3, [r2, #0]
 80013aa:	f023 0307 	bic.w	r3, r3, #7
 80013ae:	430b      	orrs	r3, r1
 80013b0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d1c2      	bne.n	8001342 <HAL_RCC_ClockConfig+0xa>
 80013bc:	e7ca      	b.n	8001354 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013be:	6862      	ldr	r2, [r4, #4]
 80013c0:	4d23      	ldr	r5, [pc, #140]	; (8001450 <HAL_RCC_ClockConfig+0x118>)
 80013c2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c6:	d11b      	bne.n	8001400 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013cc:	d0b9      	beq.n	8001342 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013ce:	68ab      	ldr	r3, [r5, #8]
 80013d0:	f023 0303 	bic.w	r3, r3, #3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80013d8:	f001 fcc0 	bl	8002d5c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013dc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013e0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	68ab      	ldr	r3, [r5, #8]
 80013e4:	6862      	ldr	r2, [r4, #4]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013ee:	d0b4      	beq.n	800135a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f0:	f001 fcb4 	bl	8002d5c <HAL_GetTick>
 80013f4:	1bc0      	subs	r0, r0, r7
 80013f6:	4540      	cmp	r0, r8
 80013f8:	d9f3      	bls.n	80013e2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80013fa:	2003      	movs	r0, #3
}
 80013fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001400:	2a02      	cmp	r2, #2
 8001402:	d102      	bne.n	800140a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001404:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001408:	e7e0      	b.n	80013cc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800140a:	b912      	cbnz	r2, 8001412 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140c:	f013 0f02 	tst.w	r3, #2
 8001410:	e7dc      	b.n	80013cc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001412:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001416:	e7d9      	b.n	80013cc <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_RCC_ClockConfig+0x118>)
 800141a:	68a0      	ldr	r0, [r4, #8]
 800141c:	6893      	ldr	r3, [r2, #8]
 800141e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001422:	4303      	orrs	r3, r0
 8001424:	6093      	str	r3, [r2, #8]
 8001426:	e79b      	b.n	8001360 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	f023 0307 	bic.w	r3, r3, #7
 800142e:	4333      	orrs	r3, r6
 8001430:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	429e      	cmp	r6, r3
 800143a:	d182      	bne.n	8001342 <HAL_RCC_ClockConfig+0xa>
 800143c:	e796      	b.n	800136c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143e:	68ab      	ldr	r3, [r5, #8]
 8001440:	68e2      	ldr	r2, [r4, #12]
 8001442:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001446:	4313      	orrs	r3, r2
 8001448:	60ab      	str	r3, [r5, #8]
 800144a:	e793      	b.n	8001374 <HAL_RCC_ClockConfig+0x3c>
 800144c:	40022000 	.word	0x40022000
 8001450:	40021000 	.word	0x40021000
 8001454:	08003f16 	.word	0x08003f16
 8001458:	20000000 	.word	0x20000000

0800145c <HAL_RCC_GetHCLKFreq>:
}
 800145c:	4b01      	ldr	r3, [pc, #4]	; (8001464 <HAL_RCC_GetHCLKFreq+0x8>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000

08001468 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RCC_GetPCLK1Freq+0x18>)
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001476:	6810      	ldr	r0, [r2, #0]
 8001478:	f003 031f 	and.w	r3, r3, #31
}
 800147c:	40d8      	lsrs	r0, r3
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000
 8001484:	08003f26 	.word	0x08003f26
 8001488:	20000000 	.word	0x20000000

0800148c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800148e:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800149a:	6810      	ldr	r0, [r2, #0]
 800149c:	f003 031f 	and.w	r3, r3, #31
}
 80014a0:	40d8      	lsrs	r0, r3
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08003f26 	.word	0x08003f26
 80014ac:	20000000 	.word	0x20000000

080014b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <RCCEx_PLLSAI1_Config+0x118>)
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	f012 0f03 	tst.w	r2, #3
{
 80014ba:	4605      	mov	r5, r0
 80014bc:	460e      	mov	r6, r1
 80014be:	461c      	mov	r4, r3
 80014c0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80014c2:	d02a      	beq.n	800151a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	4282      	cmp	r2, r0
 80014cc:	d13c      	bne.n	8001548 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80014ce:	2a00      	cmp	r2, #0
 80014d0:	d03a      	beq.n	8001548 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80014d2:	68db      	ldr	r3, [r3, #12]
       ||
 80014d4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80014d6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80014da:	3301      	adds	r3, #1
       ||
 80014dc:	4293      	cmp	r3, r2
 80014de:	d133      	bne.n	8001548 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80014e6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014e8:	f001 fc38 	bl	8002d5c <HAL_GetTick>
 80014ec:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	011a      	lsls	r2, r3, #4
 80014f2:	d432      	bmi.n	800155a <RCCEx_PLLSAI1_Config+0xaa>
 80014f4:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80014f6:	2e00      	cmp	r6, #0
 80014f8:	d036      	beq.n	8001568 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80014fa:	2e01      	cmp	r6, #1
 80014fc:	d150      	bne.n	80015a0 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80014fe:	6922      	ldr	r2, [r4, #16]
 8001500:	6928      	ldr	r0, [r5, #16]
 8001502:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001506:	0840      	lsrs	r0, r0, #1
 8001508:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800150c:	3801      	subs	r0, #1
 800150e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001512:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001516:	6122      	str	r2, [r4, #16]
 8001518:	e032      	b.n	8001580 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800151a:	2802      	cmp	r0, #2
 800151c:	d010      	beq.n	8001540 <RCCEx_PLLSAI1_Config+0x90>
 800151e:	2803      	cmp	r0, #3
 8001520:	d014      	beq.n	800154c <RCCEx_PLLSAI1_Config+0x9c>
 8001522:	2801      	cmp	r0, #1
 8001524:	d110      	bne.n	8001548 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	079f      	lsls	r7, r3, #30
 800152a:	d538      	bpl.n	800159e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800152c:	68e3      	ldr	r3, [r4, #12]
 800152e:	686a      	ldr	r2, [r5, #4]
 8001530:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001534:	3a01      	subs	r2, #1
 8001536:	4318      	orrs	r0, r3
 8001538:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800153c:	60e0      	str	r0, [r4, #12]
 800153e:	e7cf      	b.n	80014e0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001546:	d1f1      	bne.n	800152c <RCCEx_PLLSAI1_Config+0x7c>
 8001548:	2001      	movs	r0, #1
 800154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	0391      	lsls	r1, r2, #14
 8001550:	d4ec      	bmi.n	800152c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001558:	e7f5      	b.n	8001546 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800155a:	f001 fbff 	bl	8002d5c <HAL_GetTick>
 800155e:	1bc0      	subs	r0, r0, r7
 8001560:	2802      	cmp	r0, #2
 8001562:	d9c4      	bls.n	80014ee <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001564:	2003      	movs	r0, #3
 8001566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001568:	6921      	ldr	r1, [r4, #16]
 800156a:	68eb      	ldr	r3, [r5, #12]
 800156c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001570:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001574:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800157e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001586:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f001 fbe8 	bl	8002d5c <HAL_GetTick>
 800158c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	d513      	bpl.n	80015bc <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001594:	6923      	ldr	r3, [r4, #16]
 8001596:	69aa      	ldr	r2, [r5, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	6123      	str	r3, [r4, #16]
 800159c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015a0:	6923      	ldr	r3, [r4, #16]
 80015a2:	6968      	ldr	r0, [r5, #20]
 80015a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80015a8:	0840      	lsrs	r0, r0, #1
 80015aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80015ae:	3801      	subs	r0, #1
 80015b0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80015b4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80015b8:	6123      	str	r3, [r4, #16]
 80015ba:	e7e1      	b.n	8001580 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80015bc:	f001 fbce 	bl	8002d5c <HAL_GetTick>
 80015c0:	1b80      	subs	r0, r0, r6
 80015c2:	2802      	cmp	r0, #2
 80015c4:	d9e3      	bls.n	800158e <RCCEx_PLLSAI1_Config+0xde>
 80015c6:	e7cd      	b.n	8001564 <RCCEx_PLLSAI1_Config+0xb4>
 80015c8:	40021000 	.word	0x40021000

080015cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <RCCEx_PLLSAI2_Config+0xf8>)
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	f012 0f03 	tst.w	r2, #3
{
 80015d6:	4605      	mov	r5, r0
 80015d8:	460e      	mov	r6, r1
 80015da:	461c      	mov	r4, r3
 80015dc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80015de:	d028      	beq.n	8001632 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	4282      	cmp	r2, r0
 80015e8:	d13a      	bne.n	8001660 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d038      	beq.n	8001660 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80015ee:	68db      	ldr	r3, [r3, #12]
       ||
 80015f0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80015f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80015f6:	3301      	adds	r3, #1
       ||
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d131      	bne.n	8001660 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001602:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001604:	f001 fbaa 	bl	8002d5c <HAL_GetTick>
 8001608:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	d430      	bmi.n	8001672 <RCCEx_PLLSAI2_Config+0xa6>
 8001610:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001612:	2e00      	cmp	r6, #0
 8001614:	d034      	beq.n	8001680 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001616:	6963      	ldr	r3, [r4, #20]
 8001618:	6929      	ldr	r1, [r5, #16]
 800161a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800161e:	0849      	lsrs	r1, r1, #1
 8001620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001624:	3901      	subs	r1, #1
 8001626:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800162a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800162e:	6163      	str	r3, [r4, #20]
 8001630:	e032      	b.n	8001698 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001632:	2802      	cmp	r0, #2
 8001634:	d010      	beq.n	8001658 <RCCEx_PLLSAI2_Config+0x8c>
 8001636:	2803      	cmp	r0, #3
 8001638:	d014      	beq.n	8001664 <RCCEx_PLLSAI2_Config+0x98>
 800163a:	2801      	cmp	r0, #1
 800163c:	d110      	bne.n	8001660 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	079f      	lsls	r7, r3, #30
 8001642:	d538      	bpl.n	80016b6 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001644:	68e3      	ldr	r3, [r4, #12]
 8001646:	686a      	ldr	r2, [r5, #4]
 8001648:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800164c:	3a01      	subs	r2, #1
 800164e:	4318      	orrs	r0, r3
 8001650:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001654:	60e0      	str	r0, [r4, #12]
 8001656:	e7d1      	b.n	80015fc <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800165e:	d1f1      	bne.n	8001644 <RCCEx_PLLSAI2_Config+0x78>
 8001660:	2001      	movs	r0, #1
 8001662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	0391      	lsls	r1, r2, #14
 8001668:	d4ec      	bmi.n	8001644 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001670:	e7f5      	b.n	800165e <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001672:	f001 fb73 	bl	8002d5c <HAL_GetTick>
 8001676:	1bc0      	subs	r0, r0, r7
 8001678:	2802      	cmp	r0, #2
 800167a:	d9c6      	bls.n	800160a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800167c:	2003      	movs	r0, #3
 800167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001680:	6962      	ldr	r2, [r4, #20]
 8001682:	68eb      	ldr	r3, [r5, #12]
 8001684:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001688:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800168c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001696:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f001 fb5c 	bl	8002d5c <HAL_GetTick>
 80016a4:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	d505      	bpl.n	80016b8 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80016ac:	6963      	ldr	r3, [r4, #20]
 80016ae:	696a      	ldr	r2, [r5, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	6163      	str	r3, [r4, #20]
 80016b4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80016b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80016b8:	f001 fb50 	bl	8002d5c <HAL_GetTick>
 80016bc:	1b80      	subs	r0, r0, r6
 80016be:	2802      	cmp	r0, #2
 80016c0:	d9f1      	bls.n	80016a6 <RCCEx_PLLSAI2_Config+0xda>
 80016c2:	e7db      	b.n	800167c <RCCEx_PLLSAI2_Config+0xb0>
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80016c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80016cc:	6806      	ldr	r6, [r0, #0]
 80016ce:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80016d2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80016d4:	d024      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80016d6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80016d8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80016dc:	d02c      	beq.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80016de:	d802      	bhi.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016e0:	b1c1      	cbz	r1, 8001714 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80016e2:	2601      	movs	r6, #1
 80016e4:	e01c      	b.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80016e6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80016ea:	d00d      	beq.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80016ec:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80016f0:	d1f7      	bne.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016f2:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80016f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80016fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016fe:	430b      	orrs	r3, r1
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001704:	2600      	movs	r6, #0
 8001706:	e00b      	b.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001708:	4a47      	ldr	r2, [pc, #284]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170a:	68d3      	ldr	r3, [r2, #12]
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	60d3      	str	r3, [r2, #12]
      break;
 8001712:	e7ee      	b.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001714:	3004      	adds	r0, #4
 8001716:	f7ff fecb 	bl	80014b0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800171a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800171c:	2800      	cmp	r0, #0
 800171e:	d0e8      	beq.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	04d8      	lsls	r0, r3, #19
 8001724:	d506      	bpl.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001726:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001728:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800172c:	d074      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800172e:	d808      	bhi.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001730:	b1a9      	cbz	r1, 800175e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001732:	2601      	movs	r6, #1
 8001734:	4635      	mov	r5, r6
 8001736:	e021      	b.n	800177c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001738:	2100      	movs	r1, #0
 800173a:	3020      	adds	r0, #32
 800173c:	f7ff ff46 	bl	80015cc <RCCEx_PLLSAI2_Config>
 8001740:	e7eb      	b.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001742:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001746:	d004      	beq.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001748:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800174c:	d1f1      	bne.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800174e:	4635      	mov	r5, r6
 8001750:	e009      	b.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001752:	4a35      	ldr	r2, [pc, #212]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001754:	68d3      	ldr	r3, [r2, #12]
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	60d3      	str	r3, [r2, #12]
 800175c:	e7f7      	b.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800175e:	1d20      	adds	r0, r4, #4
 8001760:	f7ff fea6 	bl	80014b0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001764:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001766:	2d00      	cmp	r5, #0
 8001768:	d15c      	bne.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800176a:	4a2f      	ldr	r2, [pc, #188]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800176c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800176e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001772:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001776:	430b      	orrs	r3, r1
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	0399      	lsls	r1, r3, #14
 8001780:	f140 814f 	bpl.w	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001784:	4f28      	ldr	r7, [pc, #160]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001788:	00da      	lsls	r2, r3, #3
 800178a:	f140 8176 	bpl.w	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800178e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001792:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800182c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001796:	f8d9 3000 	ldr.w	r3, [r9]
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80017a2:	f001 fadb 	bl	8002d5c <HAL_GetTick>
 80017a6:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80017a8:	f8d9 3000 	ldr.w	r3, [r9]
 80017ac:	05db      	lsls	r3, r3, #23
 80017ae:	d53f      	bpl.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80017b0:	2d00      	cmp	r5, #0
 80017b2:	d144      	bne.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80017b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80017b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80017bc:	d015      	beq.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x122>
 80017be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d011      	beq.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80017ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80017ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80017e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80017ea:	07d8      	lsls	r0, r3, #31
 80017ec:	d509      	bpl.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80017ee:	f001 fab5 	bl	8002d5c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80017f6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017fc:	0799      	lsls	r1, r3, #30
 80017fe:	f140 8109 	bpl.w	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001806:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800180a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800180e:	4313      	orrs	r3, r2
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001814:	4635      	mov	r5, r6
 8001816:	e012      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001818:	2100      	movs	r1, #0
 800181a:	f104 0020 	add.w	r0, r4, #32
 800181e:	f7ff fed5 	bl	80015cc <RCCEx_PLLSAI2_Config>
 8001822:	e79f      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001824:	462e      	mov	r6, r5
 8001826:	e7a9      	b.n	800177c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001828:	40021000 	.word	0x40021000
 800182c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001830:	f001 fa94 	bl	8002d5c <HAL_GetTick>
 8001834:	eba0 000a 	sub.w	r0, r0, sl
 8001838:	2802      	cmp	r0, #2
 800183a:	d9b5      	bls.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 800183c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800183e:	f1b8 0f00 	cmp.w	r8, #0
 8001842:	d003      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	07da      	lsls	r2, r3, #31
 8001850:	d508      	bpl.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001852:	4990      	ldr	r1, [pc, #576]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001854:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001856:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800185a:	f022 0203 	bic.w	r2, r2, #3
 800185e:	4302      	orrs	r2, r0
 8001860:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001864:	079f      	lsls	r7, r3, #30
 8001866:	d508      	bpl.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001868:	498a      	ldr	r1, [pc, #552]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800186a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800186c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001870:	f022 020c 	bic.w	r2, r2, #12
 8001874:	4302      	orrs	r2, r0
 8001876:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800187a:	075e      	lsls	r6, r3, #29
 800187c:	d508      	bpl.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800187e:	4985      	ldr	r1, [pc, #532]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001880:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001882:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001886:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800188a:	4302      	orrs	r2, r0
 800188c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001890:	0718      	lsls	r0, r3, #28
 8001892:	d508      	bpl.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001894:	497f      	ldr	r1, [pc, #508]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001896:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001898:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800189c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80018a0:	4302      	orrs	r2, r0
 80018a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80018a6:	06d9      	lsls	r1, r3, #27
 80018a8:	d508      	bpl.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80018aa:	497a      	ldr	r1, [pc, #488]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80018ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018b6:	4302      	orrs	r2, r0
 80018b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80018bc:	069a      	lsls	r2, r3, #26
 80018be:	d508      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80018c0:	4974      	ldr	r1, [pc, #464]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018c2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80018c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018cc:	4302      	orrs	r2, r0
 80018ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80018d2:	059f      	lsls	r7, r3, #22
 80018d4:	d508      	bpl.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80018d6:	496f      	ldr	r1, [pc, #444]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018d8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80018da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018de:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80018e2:	4302      	orrs	r2, r0
 80018e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80018e8:	055e      	lsls	r6, r3, #21
 80018ea:	d508      	bpl.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80018ec:	4969      	ldr	r1, [pc, #420]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018ee:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80018f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80018f8:	4302      	orrs	r2, r0
 80018fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018fe:	0658      	lsls	r0, r3, #25
 8001900:	d508      	bpl.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001902:	4964      	ldr	r1, [pc, #400]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001904:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001906:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800190a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800190e:	4302      	orrs	r2, r0
 8001910:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001914:	0619      	lsls	r1, r3, #24
 8001916:	d508      	bpl.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001918:	495e      	ldr	r1, [pc, #376]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800191a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800191c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001920:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001924:	4302      	orrs	r2, r0
 8001926:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800192a:	05da      	lsls	r2, r3, #23
 800192c:	d508      	bpl.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800192e:	4959      	ldr	r1, [pc, #356]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001932:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001936:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800193a:	4302      	orrs	r2, r0
 800193c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001940:	049b      	lsls	r3, r3, #18
 8001942:	d50f      	bpl.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001944:	4a53      	ldr	r2, [pc, #332]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001946:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001948:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800194c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001950:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001952:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001956:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800195a:	d164      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800195c:	68d3      	ldr	r3, [r2, #12]
 800195e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001962:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	031f      	lsls	r7, r3, #12
 8001968:	d50f      	bpl.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800196a:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800196c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800196e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001972:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001976:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001978:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001980:	d15c      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001982:	68d3      	ldr	r3, [r2, #12]
 8001984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001988:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	035e      	lsls	r6, r3, #13
 800198e:	d50f      	bpl.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001990:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001992:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001994:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001998:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800199c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800199e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80019a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80019a6:	d154      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80019a8:	68d3      	ldr	r3, [r2, #12]
 80019aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ae:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	0458      	lsls	r0, r3, #17
 80019b4:	d512      	bpl.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019b6:	4937      	ldr	r1, [pc, #220]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019b8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80019ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019be:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80019c2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80019c4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80019cc:	d14c      	bne.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80019ce:	2102      	movs	r1, #2
 80019d0:	1d20      	adds	r0, r4, #4
 80019d2:	f7ff fd6d 	bl	80014b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80019d6:	2800      	cmp	r0, #0
 80019d8:	bf18      	it	ne
 80019da:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	0411      	lsls	r1, r2, #16
 80019e0:	d508      	bpl.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80019e2:	492c      	ldr	r1, [pc, #176]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019e4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80019e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019ee:	4303      	orrs	r3, r0
 80019f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80019f4:	03d3      	lsls	r3, r2, #15
 80019f6:	d509      	bpl.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80019f8:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019fa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80019fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a06:	430b      	orrs	r3, r1
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	b002      	add	sp, #8
 8001a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f001 f9a2 	bl	8002d5c <HAL_GetTick>
 8001a18:	1b40      	subs	r0, r0, r5
 8001a1a:	4548      	cmp	r0, r9
 8001a1c:	f67f aeec 	bls.w	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001a20:	e70c      	b.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001a22:	4635      	mov	r5, r6
 8001a24:	e712      	b.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001a26:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001a2a:	d19b      	bne.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	1d20      	adds	r0, r4, #4
 8001a30:	f7ff fd3e 	bl	80014b0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001a34:	2800      	cmp	r0, #0
 8001a36:	bf18      	it	ne
 8001a38:	4605      	movne	r5, r0
 8001a3a:	e793      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001a3c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001a40:	d1a3      	bne.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a42:	2101      	movs	r1, #1
 8001a44:	1d20      	adds	r0, r4, #4
 8001a46:	f7ff fd33 	bl	80014b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	bf18      	it	ne
 8001a4e:	4605      	movne	r5, r0
 8001a50:	e79b      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001a52:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001a56:	d1ab      	bne.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	1d20      	adds	r0, r4, #4
 8001a5c:	f7ff fd28 	bl	80014b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001a60:	2800      	cmp	r0, #0
 8001a62:	bf18      	it	ne
 8001a64:	4605      	movne	r5, r0
 8001a66:	e7a3      	b.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001a68:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001a6c:	d1b6      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001a6e:	2102      	movs	r1, #2
 8001a70:	f104 0020 	add.w	r0, r4, #32
 8001a74:	f7ff fdaa 	bl	80015cc <RCCEx_PLLSAI2_Config>
 8001a78:	e7ad      	b.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a8c:	f04f 0801 	mov.w	r8, #1
 8001a90:	e67f      	b.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001a98:	4a02      	ldr	r2, [pc, #8]	; (8001aa4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aa8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001aaa:	4604      	mov	r4, r0
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d04a      	beq.n	8001b46 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ab4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001ab8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001abc:	b91b      	cbnz	r3, 8001ac6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001abe:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ac2:	f001 f839 	bl	8002b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ac6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ac8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001aca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001ace:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ad0:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ad6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ae0:	d92e      	bls.n	8001b40 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ae2:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ae4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae8:	bf18      	it	ne
 8001aea:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001aee:	b92b      	cbnz	r3, 8001afc <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001af0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001af4:	bf8c      	ite	hi
 8001af6:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001af8:	2301      	movls	r3, #1
 8001afa:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001afc:	68a6      	ldr	r6, [r4, #8]
 8001afe:	6863      	ldr	r3, [r4, #4]
 8001b00:	69a5      	ldr	r5, [r4, #24]
 8001b02:	4333      	orrs	r3, r6
 8001b04:	6926      	ldr	r6, [r4, #16]
 8001b06:	4333      	orrs	r3, r6
 8001b08:	6966      	ldr	r6, [r4, #20]
 8001b0a:	4333      	orrs	r3, r6
 8001b0c:	69e6      	ldr	r6, [r4, #28]
 8001b0e:	4333      	orrs	r3, r6
 8001b10:	6a26      	ldr	r6, [r4, #32]
 8001b12:	4333      	orrs	r3, r6
 8001b14:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b16:	4333      	orrs	r3, r6
 8001b18:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001b1c:	4333      	orrs	r3, r6
 8001b1e:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b26:	0c2d      	lsrs	r5, r5, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	f005 0504 	and.w	r5, r5, #4
 8001b2e:	432a      	orrs	r2, r5
 8001b30:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001b32:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b34:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b36:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b38:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b44:	e7d0      	b.n	8001ae8 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001b46:	2001      	movs	r0, #1
}
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b4c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b4c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b4e:	69c1      	ldr	r1, [r0, #28]
{
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b54:	6883      	ldr	r3, [r0, #8]
 8001b56:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b58:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b5a:	4303      	orrs	r3, r0
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b60:	48ba      	ldr	r0, [pc, #744]	; (8001e4c <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b62:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b64:	4028      	ands	r0, r5
 8001b66:	4303      	orrs	r3, r0
 8001b68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b6a:	6853      	ldr	r3, [r2, #4]
 8001b6c:	68e0      	ldr	r0, [r4, #12]
 8001b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b72:	4303      	orrs	r3, r0
 8001b74:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b76:	4bb6      	ldr	r3, [pc, #728]	; (8001e50 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b78:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b7a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b7c:	bf1c      	itt	ne
 8001b7e:	6a23      	ldrne	r3, [r4, #32]
 8001b80:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b82:	6893      	ldr	r3, [r2, #8]
 8001b84:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001b88:	4303      	orrs	r3, r0
 8001b8a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b8c:	4bb1      	ldr	r3, [pc, #708]	; (8001e54 <UART_SetConfig+0x308>)
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d119      	bne.n	8001bc6 <UART_SetConfig+0x7a>
 8001b92:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001b96:	4ab0      	ldr	r2, [pc, #704]	; (8001e58 <UART_SetConfig+0x30c>)
 8001b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9c:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ba0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	f040 8138 	bne.w	8001e1a <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	f200 808f 	bhi.w	8001cce <UART_SetConfig+0x182>
 8001bb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001bb4:	00ca011a 	.word	0x00ca011a
 8001bb8:	008d00f9 	.word	0x008d00f9
 8001bbc:	008d0114 	.word	0x008d0114
 8001bc0:	008d008d 	.word	0x008d008d
 8001bc4:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bc6:	4ba5      	ldr	r3, [pc, #660]	; (8001e5c <UART_SetConfig+0x310>)
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d107      	bne.n	8001bdc <UART_SetConfig+0x90>
 8001bcc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001bd0:	4aa3      	ldr	r2, [pc, #652]	; (8001e60 <UART_SetConfig+0x314>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	e7e1      	b.n	8001ba0 <UART_SetConfig+0x54>
 8001bdc:	4ba1      	ldr	r3, [pc, #644]	; (8001e64 <UART_SetConfig+0x318>)
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d123      	bne.n	8001c2a <UART_SetConfig+0xde>
 8001be2:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	f000 80f1 	beq.w	8001dd6 <UART_SetConfig+0x28a>
 8001bf4:	d80b      	bhi.n	8001c0e <UART_SetConfig+0xc2>
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80f3 	beq.w	8001de2 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bfc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001c00:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c04:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c08:	f000 80f8 	beq.w	8001dfc <UART_SetConfig+0x2b0>
 8001c0c:	e0a8      	b.n	8001d60 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	f000 80c6 	beq.w	8001da0 <UART_SetConfig+0x254>
 8001c14:	2b30      	cmp	r3, #48	; 0x30
 8001c16:	d1f1      	bne.n	8001bfc <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c1c:	f040 80b8 	bne.w	8001d90 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c20:	6860      	ldr	r0, [r4, #4]
 8001c22:	0843      	lsrs	r3, r0, #1
 8001c24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c28:	e0c3      	b.n	8001db2 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c2a:	4b8f      	ldr	r3, [pc, #572]	; (8001e68 <UART_SetConfig+0x31c>)
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d11e      	bne.n	8001c6e <UART_SetConfig+0x122>
 8001c30:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c3c:	2b40      	cmp	r3, #64	; 0x40
 8001c3e:	f000 80bb 	beq.w	8001db8 <UART_SetConfig+0x26c>
 8001c42:	d80a      	bhi.n	8001c5a <UART_SetConfig+0x10e>
 8001c44:	b97b      	cbnz	r3, 8001c66 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c46:	4b82      	ldr	r3, [pc, #520]	; (8001e50 <UART_SetConfig+0x304>)
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 80ca 	bne.w	8001de2 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001c4e:	f7ff fc0b 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
        break;
 8001c52:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001c54:	bbb0      	cbnz	r0, 8001cc4 <UART_SetConfig+0x178>
 8001c56:	4602      	mov	r2, r0
 8001c58:	e03a      	b.n	8001cd0 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c5a:	2b80      	cmp	r3, #128	; 0x80
 8001c5c:	f000 809d 	beq.w	8001d9a <UART_SetConfig+0x24e>
 8001c60:	2bc0      	cmp	r3, #192	; 0xc0
 8001c62:	f000 80b0 	beq.w	8001dc6 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c66:	4b7a      	ldr	r3, [pc, #488]	; (8001e50 <UART_SetConfig+0x304>)
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1c7      	bne.n	8001bfc <UART_SetConfig+0xb0>
 8001c6c:	e02f      	b.n	8001cce <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <UART_SetConfig+0x320>)
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d111      	bne.n	8001c98 <UART_SetConfig+0x14c>
 8001c74:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c84:	f000 8098 	beq.w	8001db8 <UART_SetConfig+0x26c>
 8001c88:	d9dc      	bls.n	8001c44 <UART_SetConfig+0xf8>
 8001c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8e:	f000 8084 	beq.w	8001d9a <UART_SetConfig+0x24e>
 8001c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c96:	e7e4      	b.n	8001c62 <UART_SetConfig+0x116>
 8001c98:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <UART_SetConfig+0x304>)
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d1ae      	bne.n	8001bfc <UART_SetConfig+0xb0>
 8001c9e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	f000 8083 	beq.w	8001db8 <UART_SetConfig+0x26c>
 8001cb2:	d9c7      	bls.n	8001c44 <UART_SetConfig+0xf8>
 8001cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb8:	d06f      	beq.n	8001d9a <UART_SetConfig+0x24e>
 8001cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001cbe:	e7d0      	b.n	8001c62 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001cc0:	486b      	ldr	r0, [pc, #428]	; (8001e70 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001cc2:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001cc4:	6862      	ldr	r2, [r4, #4]
 8001cc6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001cca:	4281      	cmp	r1, r0
 8001ccc:	d905      	bls.n	8001cda <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001cce:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001cd4:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001cda:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001cde:	d8f6      	bhi.n	8001cce <UART_SetConfig+0x182>
        switch (clocksource)
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d82e      	bhi.n	8001d42 <UART_SetConfig+0x1f6>
 8001ce4:	e8df f003 	tbb	[pc, r3]
 8001ce8:	2d1c2d05 	.word	0x2d1c2d05
 8001cec:	2d2d2d24 	.word	0x2d2d2d24
 8001cf0:	27          	.byte	0x27
 8001cf1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cf2:	f7ff fbb9 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cf6:	6862      	ldr	r2, [r4, #4]
 8001cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cfc:	0856      	lsrs	r6, r2, #1
 8001cfe:	2700      	movs	r7, #0
 8001d00:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001d04:	2300      	movs	r3, #0
 8001d06:	4630      	mov	r0, r6
 8001d08:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d0a:	f7fe fab1 	bl	8000270 <__aeabi_uldivmod>
            break;
 8001d0e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001d10:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <UART_SetConfig+0x328>)
 8001d12:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001d16:	4299      	cmp	r1, r3
 8001d18:	d8d9      	bhi.n	8001cce <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	60d8      	str	r0, [r3, #12]
 8001d1e:	e7d7      	b.n	8001cd0 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001d20:	4855      	ldr	r0, [pc, #340]	; (8001e78 <UART_SetConfig+0x32c>)
 8001d22:	0855      	lsrs	r5, r2, #1
 8001d24:	2300      	movs	r3, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d2a:	f141 0100 	adc.w	r1, r1, #0
 8001d2e:	e7ec      	b.n	8001d0a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d30:	f7ff f888 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8001d34:	e7df      	b.n	8001cf6 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d36:	0850      	lsrs	r0, r2, #1
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001d40:	e7f3      	b.n	8001d2a <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001d42:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d44:	2000      	movs	r0, #0
 8001d46:	e7e3      	b.n	8001d10 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d48:	f7ff fba0 	bl	800148c <HAL_RCC_GetPCLK2Freq>
 8001d4c:	e04e      	b.n	8001dec <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d4e:	f7ff fb8b 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d52:	6862      	ldr	r2, [r4, #4]
 8001d54:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d5c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d5e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d60:	f1a3 0010 	sub.w	r0, r3, #16
 8001d64:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001d68:	4288      	cmp	r0, r1
 8001d6a:	d8b0      	bhi.n	8001cce <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001d6c:	6821      	ldr	r1, [r4, #0]
 8001d6e:	60cb      	str	r3, [r1, #12]
 8001d70:	e7ae      	b.n	8001cd0 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d72:	f7ff fb8b 	bl	800148c <HAL_RCC_GetPCLK2Freq>
 8001d76:	e7ec      	b.n	8001d52 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d78:	6860      	ldr	r0, [r4, #4]
 8001d7a:	0843      	lsrs	r3, r0, #1
 8001d7c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001d80:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d84:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d88:	e7e8      	b.n	8001d5c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d8a:	f7ff f85b 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8001d8e:	e7e0      	b.n	8001d52 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d90:	6860      	ldr	r0, [r4, #4]
 8001d92:	0843      	lsrs	r3, r0, #1
 8001d94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d98:	e7f4      	b.n	8001d84 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <UART_SetConfig+0x304>)
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d08f      	beq.n	8001cc0 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001da0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001da4:	d1e8      	bne.n	8001d78 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001da6:	6860      	ldr	r0, [r4, #4]
 8001da8:	0843      	lsrs	r3, r0, #1
 8001daa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001dae:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001db2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001db6:	e01f      	b.n	8001df8 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <UART_SetConfig+0x304>)
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d10b      	bne.n	8001dd6 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001dbe:	f7ff f841 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
        break;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e746      	b.n	8001c54 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <UART_SetConfig+0x304>)
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f47f af25 	bne.w	8001c18 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001dce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e776      	b.n	8001cc4 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dd6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001dda:	d1d6      	bne.n	8001d8a <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ddc:	f7ff f832 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8001de0:	e004      	b.n	8001dec <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001de2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001de6:	d1b2      	bne.n	8001d4e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001de8:	f7ff fb3e 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dec:	6861      	ldr	r1, [r4, #4]
 8001dee:	084a      	lsrs	r2, r1, #1
 8001df0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001df4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dfa:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dfc:	f1a3 0010 	sub.w	r0, r3, #16
 8001e00:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001e04:	4288      	cmp	r0, r1
 8001e06:	f63f af62 	bhi.w	8001cce <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001e0a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001e0e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e10:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001e14:	430b      	orrs	r3, r1
 8001e16:	60c3      	str	r3, [r0, #12]
 8001e18:	e75a      	b.n	8001cd0 <UART_SetConfig+0x184>
    switch (clocksource)
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	f63f af57 	bhi.w	8001cce <UART_SetConfig+0x182>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <UART_SetConfig+0x2dc>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001d4f 	.word	0x08001d4f
 8001e2c:	08001d73 	.word	0x08001d73
 8001e30:	08001d79 	.word	0x08001d79
 8001e34:	08001ccf 	.word	0x08001ccf
 8001e38:	08001d8b 	.word	0x08001d8b
 8001e3c:	08001ccf 	.word	0x08001ccf
 8001e40:	08001ccf 	.word	0x08001ccf
 8001e44:	08001ccf 	.word	0x08001ccf
 8001e48:	08001d91 	.word	0x08001d91
 8001e4c:	efff69f3 	.word	0xefff69f3
 8001e50:	40008000 	.word	0x40008000
 8001e54:	40013800 	.word	0x40013800
 8001e58:	08003ea4 	.word	0x08003ea4
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	08003ea8 	.word	0x08003ea8
 8001e64:	40004800 	.word	0x40004800
 8001e68:	40004c00 	.word	0x40004c00
 8001e6c:	40005000 	.word	0x40005000
 8001e70:	00f42400 	.word	0x00f42400
 8001e74:	000ffcff 	.word	0x000ffcff
 8001e78:	f4240000 	.word	0xf4240000

08001e7c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e7e:	07da      	lsls	r2, r3, #31
{
 8001e80:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e82:	d506      	bpl.n	8001e92 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e84:	6801      	ldr	r1, [r0, #0]
 8001e86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e88:	684a      	ldr	r2, [r1, #4]
 8001e8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e8e:	4322      	orrs	r2, r4
 8001e90:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e92:	079c      	lsls	r4, r3, #30
 8001e94:	d506      	bpl.n	8001ea4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e96:	6801      	ldr	r1, [r0, #0]
 8001e98:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e9a:	684a      	ldr	r2, [r1, #4]
 8001e9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ea0:	4322      	orrs	r2, r4
 8001ea2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ea4:	0759      	lsls	r1, r3, #29
 8001ea6:	d506      	bpl.n	8001eb6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ea8:	6801      	ldr	r1, [r0, #0]
 8001eaa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001eac:	684a      	ldr	r2, [r1, #4]
 8001eae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001eb2:	4322      	orrs	r2, r4
 8001eb4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001eb6:	071a      	lsls	r2, r3, #28
 8001eb8:	d506      	bpl.n	8001ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001eba:	6801      	ldr	r1, [r0, #0]
 8001ebc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001ebe:	684a      	ldr	r2, [r1, #4]
 8001ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec4:	4322      	orrs	r2, r4
 8001ec6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ec8:	06dc      	lsls	r4, r3, #27
 8001eca:	d506      	bpl.n	8001eda <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ecc:	6801      	ldr	r1, [r0, #0]
 8001ece:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ed0:	688a      	ldr	r2, [r1, #8]
 8001ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed6:	4322      	orrs	r2, r4
 8001ed8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001eda:	0699      	lsls	r1, r3, #26
 8001edc:	d506      	bpl.n	8001eec <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ede:	6801      	ldr	r1, [r0, #0]
 8001ee0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ee2:	688a      	ldr	r2, [r1, #8]
 8001ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee8:	4322      	orrs	r2, r4
 8001eea:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001eec:	065a      	lsls	r2, r3, #25
 8001eee:	d50f      	bpl.n	8001f10 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ef0:	6801      	ldr	r1, [r0, #0]
 8001ef2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ef4:	684a      	ldr	r2, [r1, #4]
 8001ef6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001efa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001efc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f00:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f02:	d105      	bne.n	8001f10 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f04:	684a      	ldr	r2, [r1, #4]
 8001f06:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f08:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f0c:	4322      	orrs	r2, r4
 8001f0e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	d506      	bpl.n	8001f22 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f14:	6802      	ldr	r2, [r0, #0]
 8001f16:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f18:	6853      	ldr	r3, [r2, #4]
 8001f1a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	6053      	str	r3, [r2, #4]
 8001f22:	bd10      	pop	{r4, pc}

08001f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f28:	9d06      	ldr	r5, [sp, #24]
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	460f      	mov	r7, r1
 8001f2e:	4616      	mov	r6, r2
 8001f30:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f32:	6821      	ldr	r1, [r4, #0]
 8001f34:	69ca      	ldr	r2, [r1, #28]
 8001f36:	ea37 0302 	bics.w	r3, r7, r2
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2201      	moveq	r2, #1
 8001f3e:	2200      	movne	r2, #0
 8001f40:	42b2      	cmp	r2, r6
 8001f42:	d002      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001f44:	2000      	movs	r0, #0
}
 8001f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	1c6b      	adds	r3, r5, #1
 8001f4c:	d0f2      	beq.n	8001f34 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f4e:	b99d      	cbnz	r5, 8001f78 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001f62:	2320      	movs	r3, #32
 8001f64:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001f68:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001f72:	2003      	movs	r0, #3
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f78:	f000 fef0 	bl	8002d5c <HAL_GetTick>
 8001f7c:	eba0 0008 	sub.w	r0, r0, r8
 8001f80:	4285      	cmp	r5, r0
 8001f82:	d2d6      	bcs.n	8001f32 <UART_WaitOnFlagUntilTimeout+0xe>
 8001f84:	e7e4      	b.n	8001f50 <UART_WaitOnFlagUntilTimeout+0x2c>

08001f86 <HAL_UART_Transmit>:
{
 8001f86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f8a:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001f8c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001f90:	2b20      	cmp	r3, #32
{
 8001f92:	4604      	mov	r4, r0
 8001f94:	460d      	mov	r5, r1
 8001f96:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001f98:	d14a      	bne.n	8002030 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001f9a:	2900      	cmp	r1, #0
 8001f9c:	d046      	beq.n	800202c <HAL_UART_Transmit+0xa6>
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d044      	beq.n	800202c <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001fa2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d042      	beq.n	8002030 <HAL_UART_Transmit+0xaa>
 8001faa:	2301      	movs	r3, #1
 8001fac:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb4:	2321      	movs	r3, #33	; 0x21
 8001fb6:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001fba:	f000 fecf 	bl	8002d5c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001fbe:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001fc2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001fc4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001fc8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fcc:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001fce:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd0:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001fd2:	b952      	cbnz	r2, 8001fea <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fd4:	2140      	movs	r1, #64	; 0x40
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7ff ffa4 	bl	8001f24 <UART_WaitOnFlagUntilTimeout>
 8001fdc:	b958      	cbnz	r0, 8001ff6 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001fe4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001fe8:	e006      	b.n	8001ff8 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fea:	2200      	movs	r2, #0
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ff98 	bl	8001f24 <UART_WaitOnFlagUntilTimeout>
 8001ff4:	b118      	cbz	r0, 8001ffe <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
}
 8001ff8:	b002      	add	sp, #8
 8001ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffe:	68a3      	ldr	r3, [r4, #8]
 8002000:	6822      	ldr	r2, [r4, #0]
 8002002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002006:	d10d      	bne.n	8002024 <HAL_UART_Transmit+0x9e>
 8002008:	6923      	ldr	r3, [r4, #16]
 800200a:	b95b      	cbnz	r3, 8002024 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800200c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002014:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002016:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800201a:	3b01      	subs	r3, #1
 800201c:	b29b      	uxth	r3, r3
 800201e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002022:	e7d1      	b.n	8001fc8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002024:	782b      	ldrb	r3, [r5, #0]
 8002026:	8513      	strh	r3, [r2, #40]	; 0x28
 8002028:	3501      	adds	r5, #1
 800202a:	e7f4      	b.n	8002016 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800202c:	2001      	movs	r0, #1
 800202e:	e7e3      	b.n	8001ff8 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002030:	2002      	movs	r0, #2
 8002032:	e7e1      	b.n	8001ff8 <HAL_UART_Transmit+0x72>

08002034 <UART_CheckIdleState>:
{
 8002034:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002036:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002038:	2600      	movs	r6, #0
 800203a:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800203c:	f000 fe8e 	bl	8002d5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002046:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002048:	d417      	bmi.n	800207a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	075b      	lsls	r3, r3, #29
 8002050:	d50a      	bpl.n	8002068 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002052:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	462b      	mov	r3, r5
 800205c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff ff5f 	bl	8001f24 <UART_WaitOnFlagUntilTimeout>
 8002066:	b9a0      	cbnz	r0, 8002092 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002068:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800206a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800206c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002070:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002074:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002078:	e00c      	b.n	8002094 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800207a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	4632      	mov	r2, r6
 8002082:	4603      	mov	r3, r0
 8002084:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff ff4b 	bl	8001f24 <UART_WaitOnFlagUntilTimeout>
 800208e:	2800      	cmp	r0, #0
 8002090:	d0db      	beq.n	800204a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002092:	2003      	movs	r0, #3
}
 8002094:	b002      	add	sp, #8
 8002096:	bd70      	pop	{r4, r5, r6, pc}

08002098 <HAL_UART_Init>:
{
 8002098:	b510      	push	{r4, lr}
  if (huart == NULL)
 800209a:	4604      	mov	r4, r0
 800209c:	b360      	cbz	r0, 80020f8 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800209e:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80020a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020a6:	b91b      	cbnz	r3, 80020b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020a8:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80020ac:	f001 f990 	bl	80033d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020b2:	2324      	movs	r3, #36	; 0x24
 80020b4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7ff fd43 	bl	8001b4c <UART_SetConfig>
 80020c6:	2801      	cmp	r0, #1
 80020c8:	d016      	beq.n	80020f8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020cc:	b113      	cbz	r3, 80020d4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff fed4 	bl	8001e7c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80020ec:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80020f4:	f7ff bf9e 	b.w	8002034 <UART_CheckIdleState>
}
 80020f8:	2001      	movs	r0, #1
 80020fa:	bd10      	pop	{r4, pc}

080020fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80020fe:	3b01      	subs	r3, #1
 8002100:	d101      	bne.n	8002106 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
 8002104:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002106:	6902      	ldr	r2, [r0, #16]
 8002108:	2a00      	cmp	r2, #0
 800210a:	daf8      	bge.n	80020fe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800210c:	6903      	ldr	r3, [r0, #16]
 800210e:	4a06      	ldr	r2, [pc, #24]	; (8002128 <USB_CoreReset+0x2c>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002116:	3a01      	subs	r2, #1
 8002118:	d0f3      	beq.n	8002102 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800211a:	6903      	ldr	r3, [r0, #16]
 800211c:	f013 0301 	ands.w	r3, r3, #1
 8002120:	d1f9      	bne.n	8002116 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002122:	4618      	mov	r0, r3
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	00030d41 	.word	0x00030d41

0800212c <USB_CoreInit>:
{
 800212c:	b084      	sub	sp, #16
 800212e:	b538      	push	{r3, r4, r5, lr}
 8002130:	ad05      	add	r5, sp, #20
 8002132:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002138:	2b01      	cmp	r3, #1
{
 800213a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800213c:	d11b      	bne.n	8002176 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800213e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002146:	68c3      	ldr	r3, [r0, #12]
 8002148:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800214c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002150:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002152:	68c3      	ldr	r3, [r0, #12]
 8002154:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002158:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800215a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800215c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800215e:	bf02      	ittt	eq
 8002160:	68c3      	ldreq	r3, [r0, #12]
 8002162:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002166:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002168:	f7ff ffc8 	bl	80020fc <USB_CoreReset>
}
 800216c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002170:	2000      	movs	r0, #0
 8002172:	b004      	add	sp, #16
 8002174:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002176:	68c3      	ldr	r3, [r0, #12]
 8002178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217c:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800217e:	f7ff ffbd 	bl	80020fc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002186:	63a3      	str	r3, [r4, #56]	; 0x38
 8002188:	e7f0      	b.n	800216c <USB_CoreInit+0x40>

0800218a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800218a:	6883      	ldr	r3, [r0, #8]
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6083      	str	r3, [r0, #8]
}
 8002192:	2000      	movs	r0, #0
 8002194:	4770      	bx	lr

08002196 <USB_SetCurrentMode>:
{
 8002196:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002198:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800219a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800219c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80021a0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80021a2:	d108      	bne.n	80021b6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80021a4:	68c3      	ldr	r3, [r0, #12]
 80021a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80021aa:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80021ac:	2032      	movs	r0, #50	; 0x32
 80021ae:	f000 fdbd 	bl	8002d2c <HAL_Delay>
  return HAL_OK;
 80021b2:	2000      	movs	r0, #0
 80021b4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80021b6:	b919      	cbnz	r1, 80021c0 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80021b8:	68c3      	ldr	r3, [r0, #12]
 80021ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021be:	e7f4      	b.n	80021aa <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
}
 80021c2:	bd08      	pop	{r3, pc}

080021c4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80021c4:	0189      	lsls	r1, r1, #6
 80021c6:	f041 0120 	orr.w	r1, r1, #32
 80021ca:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <USB_FlushTxFifo+0x20>)
 80021cc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80021ce:	3a01      	subs	r2, #1
 80021d0:	d005      	beq.n	80021de <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80021d2:	6903      	ldr	r3, [r0, #16]
 80021d4:	f013 0320 	ands.w	r3, r3, #32
 80021d8:	d1f9      	bne.n	80021ce <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80021da:	4618      	mov	r0, r3
 80021dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80021de:	2003      	movs	r0, #3
}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	00030d41 	.word	0x00030d41

080021e8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80021e8:	2310      	movs	r3, #16
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <USB_FlushRxFifo+0x1c>)
 80021ec:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80021ee:	3a01      	subs	r2, #1
 80021f0:	d005      	beq.n	80021fe <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80021f2:	6903      	ldr	r3, [r0, #16]
 80021f4:	f013 0310 	ands.w	r3, r3, #16
 80021f8:	d1f9      	bne.n	80021ee <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80021fa:	4618      	mov	r0, r3
 80021fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80021fe:	2003      	movs	r0, #3
}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	00030d41 	.word	0x00030d41

08002208 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002208:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800220c:	4319      	orrs	r1, r3
 800220e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002212:	2000      	movs	r0, #0
 8002214:	4770      	bx	lr
	...

08002218 <USB_DevInit>:
{
 8002218:	b084      	sub	sp, #16
 800221a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221e:	4604      	mov	r4, r0
 8002220:	a807      	add	r0, sp, #28
 8002222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800222a:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800222c:	4619      	mov	r1, r3
 800222e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002232:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002236:	3301      	adds	r3, #1
 8002238:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800223a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800223c:	d1f7      	bne.n	800222e <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800223e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002244:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002246:	b95f      	cbnz	r7, 8002260 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800224a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800224e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002256:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225e:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002260:	2500      	movs	r5, #0
 8002262:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002266:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800226a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800226e:	2103      	movs	r1, #3
 8002270:	4620      	mov	r0, r4
 8002272:	f7ff ffc9 	bl	8002208 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002276:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800227a:	2110      	movs	r1, #16
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ffa1 	bl	80021c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff ffb0 	bl	80021e8 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8002288:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800228a:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 800228c:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 800228e:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8002290:	61f5      	str	r5, [r6, #28]
 8002292:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800229a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800229e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022a2:	4543      	cmp	r3, r8
 80022a4:	d12f      	bne.n	8002306 <USB_DevInit+0xee>
 80022a6:	2100      	movs	r1, #0
 80022a8:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80022ac:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80022ae:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80022b2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80022b6:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022ba:	428b      	cmp	r3, r1
 80022bc:	d134      	bne.n	8002328 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80022be:	6933      	ldr	r3, [r6, #16]
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80022ca:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80022ce:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80022d0:	69a3      	ldr	r3, [r4, #24]
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80022d8:	69a2      	ldr	r2, [r4, #24]
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <USB_DevInit+0x134>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80022e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022e2:	b11b      	cbz	r3, 80022ec <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80022e4:	69a3      	ldr	r3, [r4, #24]
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80022ec:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80022ee:	bf01      	itttt	eq
 80022f0:	69a3      	ldreq	r3, [r4, #24]
 80022f2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80022f6:	f043 0304 	orreq.w	r3, r3, #4
 80022fa:	61a3      	streq	r3, [r4, #24]
}
 80022fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002300:	2000      	movs	r0, #0
 8002302:	b004      	add	sp, #16
 8002304:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002306:	f8d2 c000 	ldr.w	ip, [r2]
 800230a:	f1bc 0f00 	cmp.w	ip, #0
 800230e:	da09      	bge.n	8002324 <USB_DevInit+0x10c>
      if (i == 0U)
 8002310:	b933      	cbnz	r3, 8002320 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002312:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002314:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002316:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002318:	f8c2 e008 	str.w	lr, [r2, #8]
 800231c:	3220      	adds	r2, #32
 800231e:	e7c0      	b.n	80022a2 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002320:	6010      	str	r0, [r2, #0]
 8002322:	e7f7      	b.n	8002314 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002324:	6011      	str	r1, [r2, #0]
 8002326:	e7f5      	b.n	8002314 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002328:	f8d2 8000 	ldr.w	r8, [r2]
 800232c:	f1b8 0f00 	cmp.w	r8, #0
 8002330:	da0a      	bge.n	8002348 <USB_DevInit+0x130>
      if (i == 0U)
 8002332:	b939      	cbnz	r1, 8002344 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002334:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002338:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800233a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800233c:	f8c2 c008 	str.w	ip, [r2, #8]
 8002340:	3220      	adds	r2, #32
 8002342:	e7ba      	b.n	80022ba <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002344:	6015      	str	r5, [r2, #0]
 8002346:	e7f7      	b.n	8002338 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002348:	6010      	str	r0, [r2, #0]
 800234a:	e7f5      	b.n	8002338 <USB_DevInit+0x120>
 800234c:	803c3800 	.word	0x803c3800

08002350 <USB_DevDisconnect>:
{
 8002350:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002352:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800235e:	2003      	movs	r0, #3
 8002360:	f000 fce4 	bl	8002d2c <HAL_Delay>
}
 8002364:	2000      	movs	r0, #0
 8002366:	bd08      	pop	{r3, pc}

08002368 <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002368:	480e      	ldr	r0, [pc, #56]	; (80023a4 <MX_DFSDM1_Init+0x3c>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800236a:	2102      	movs	r1, #2
{
 800236c:	b508      	push	{r3, lr}
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_DFSDM1_Init+0x40>)
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8002370:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002372:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002376:	2201      	movs	r2, #1
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002378:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800237a:	6181      	str	r1, [r0, #24]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800237c:	2300      	movs	r3, #0
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800237e:	2104      	movs	r1, #4
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002380:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002382:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002384:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002386:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002388:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800238a:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800238c:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800238e:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002390:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002392:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002394:	f7fe f9b0 	bl	80006f8 <HAL_DFSDM_ChannelInit>
 8002398:	b118      	cbz	r0, 80023a2 <MX_DFSDM1_Init+0x3a>
  {
    Error_Handler();
  }

}
 800239a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800239e:	f000 bb53 	b.w	8002a48 <Error_Handler>
 80023a2:	bd08      	pop	{r3, pc}
 80023a4:	20000158 	.word	0x20000158
 80023a8:	40016020 	.word	0x40016020

080023ac <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80023ac:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 80023ae:	4c17      	ldr	r4, [pc, #92]	; (800240c <HAL_DFSDM_ChannelMspInit+0x60>)
{
 80023b0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	2214      	movs	r2, #20
 80023b4:	2100      	movs	r1, #0
 80023b6:	a803      	add	r0, sp, #12
 80023b8:	f001 f91e 	bl	80035f8 <memset>
  if(DFSDM1_Init == 0)
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	bb1b      	cbnz	r3, 8002408 <HAL_DFSDM_ChannelMspInit+0x5c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80023c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c8:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80023ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023cc:	4810      	ldr	r0, [pc, #64]	; (8002410 <HAL_DFSDM_ChannelMspInit+0x64>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80023ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023d2:	661a      	str	r2, [r3, #96]	; 0x60
 80023d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d6:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80023da:	9201      	str	r2, [sp, #4]
 80023dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e0:	f042 0210 	orr.w	r2, r2, #16
 80023e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80023e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80023f0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80023f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023fa:	2306      	movs	r3, #6
 80023fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023fe:	f7fe f9ef 	bl	80007e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	6023      	str	r3, [r4, #0]
  }
}
 8002408:	b008      	add	sp, #32
 800240a:	bd10      	pop	{r4, pc}
 800240c:	200000a8 	.word	0x200000a8
 8002410:	48001000 	.word	0x48001000

08002414 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002418:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241a:	2214      	movs	r2, #20
 800241c:	2100      	movs	r1, #0
 800241e:	a807      	add	r0, sp, #28
 8002420:	f001 f8ea 	bl	80035f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002424:	4b9e      	ldr	r3, [pc, #632]	; (80026a0 <MX_GPIO_Init+0x28c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002426:	4e9f      	ldr	r6, [pc, #636]	; (80026a4 <MX_GPIO_Init+0x290>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002428:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LD2_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800242a:	4f9f      	ldr	r7, [pc, #636]	; (80026a8 <MX_GPIO_Init+0x294>)
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800242c:	f8df 9280 	ldr.w	r9, [pc, #640]	; 80026b0 <MX_GPIO_Init+0x29c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002430:	f8df a280 	ldr.w	sl, [pc, #640]	; 80026b4 <MX_GPIO_Init+0x2a0>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002434:	f8df b280 	ldr.w	fp, [pc, #640]	; 80026b8 <MX_GPIO_Init+0x2a4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002438:	f042 0210 	orr.w	r2, r2, #16
 800243c:	64da      	str	r2, [r3, #76]	; 0x4c
 800243e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002440:	f002 0210 	and.w	r2, r2, #16
 8002444:	9202      	str	r2, [sp, #8]
 8002446:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800244a:	f042 0204 	orr.w	r2, r2, #4
 800244e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002452:	f002 0204 	and.w	r2, r2, #4
 8002456:	9203      	str	r2, [sp, #12]
 8002458:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	64da      	str	r2, [r3, #76]	; 0x4c
 8002462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002464:	f002 0201 	and.w	r2, r2, #1
 8002468:	9204      	str	r2, [sp, #16]
 800246a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800246e:	f042 0202 	orr.w	r2, r2, #2
 8002472:	64da      	str	r2, [r3, #76]	; 0x4c
 8002474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002476:	f002 0202 	and.w	r2, r2, #2
 800247a:	9205      	str	r2, [sp, #20]
 800247c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800247e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002480:	f042 0208 	orr.w	r2, r2, #8
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800248e:	4630      	mov	r0, r6
 8002490:	2200      	movs	r2, #0
 8002492:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002496:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002498:	f7fe fa7e 	bl	8000998 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LD2_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	f248 1124 	movw	r1, #33060	; 0x8124
 80024a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a6:	f7fe fa77 	bl	8000998 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80024aa:	4638      	mov	r0, r7
 80024ac:	2200      	movs	r2, #0
 80024ae:	f24f 0134 	movw	r1, #61492	; 0xf034
 80024b2:	f7fe fa71 	bl	8000998 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80024b6:	4648      	mov	r0, r9
 80024b8:	2200      	movs	r2, #0
 80024ba:	f243 0181 	movw	r1, #12417	; 0x3081
 80024be:	f7fe fa6b 	bl	8000998 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	4650      	mov	r0, sl
 80024c6:	f44f 7110 	mov.w	r1, #576	; 0x240
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80024cc:	f7fe fa64 	bl	8000998 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80024d2:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d6:	a907      	add	r1, sp, #28
 80024d8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80024da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e2:	f7fe f97d 	bl	80007e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80024e6:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e8:	a907      	add	r1, sp, #28
 80024ea:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80024ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ee:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f4:	f7fe f974 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80024f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80024fe:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <MX_GPIO_Init+0x298>)
 8002502:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002504:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002508:	f7fe f96a 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800250c:	233f      	movs	r3, #63	; 0x3f
 800250e:	9307      	str	r3, [sp, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002510:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002512:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002514:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002516:	9308      	str	r3, [sp, #32]
 8002518:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251c:	f7fe f960 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PushButton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(PushButton_GPIO_Port, &GPIO_InitStruct);
 8002520:	a907      	add	r1, sp, #28
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D0_Pin;
 8002526:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = PushButton_Pin;
 800252c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(PushButton_GPIO_Port, &GPIO_InitStruct);
 8002532:	f7fe f955 	bl	80007e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002536:	2208      	movs	r2, #8
  HAL_GPIO_Init(ARD_D0_GPIO_Port, &GPIO_InitStruct);
 8002538:	a907      	add	r1, sp, #28
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800253e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002540:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Pin = ARD_D0_Pin;
 8002542:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(ARD_D0_GPIO_Port, &GPIO_InitStruct);
 800254c:	f7fe f948 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LD2_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002550:	f248 1124 	movw	r1, #33060	; 0x8124
 8002554:	9107      	str	r1, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f7fe f93d 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002566:	9a00      	ldr	r2, [sp, #0]
 8002568:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800256a:	a907      	add	r1, sp, #28
 800256c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002576:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002578:	f7fe f932 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800257c:	9b01      	ldr	r3, [sp, #4]
 800257e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002580:	2210      	movs	r2, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002582:	a907      	add	r1, sp, #28
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002588:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800258c:	f7fe f928 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002590:	22c0      	movs	r2, #192	; 0xc0
 8002592:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002596:	2205      	movs	r2, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259c:	920b      	str	r2, [sp, #44]	; 0x2c
 800259e:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f7fe f91a 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80025ac:	a907      	add	r1, sp, #28
 80025ae:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80025b0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b2:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f7fe f912 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025bc:	9b01      	ldr	r3, [sp, #4]
 80025be:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80025c0:	a907      	add	r1, sp, #28
 80025c2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80025c4:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f7fe f90a 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80025cc:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	a907      	add	r1, sp, #28
 80025d2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80025d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f7fe f900 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80025e0:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e4:	a907      	add	r1, sp, #28
 80025e6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80025e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025ea:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f0:	f7fe f8f6 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80025f4:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f8:	a907      	add	r1, sp, #28
 80025fa:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80025fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002604:	f7fe f8ec 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002608:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260c:	a907      	add	r1, sp, #28
 800260e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002610:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002618:	f7fe f8e2 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800261c:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002620:	a907      	add	r1, sp, #28
 8002622:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002624:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002626:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262c:	f7fe f8d8 	bl	80007e0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002630:	9a00      	ldr	r2, [sp, #0]
 8002632:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002634:	a907      	add	r1, sp, #28
 8002636:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002638:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002642:	f7fe f8cd 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002646:	2378      	movs	r3, #120	; 0x78
 8002648:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800264c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264e:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002650:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800265a:	f7fe f8c1 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800265e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002662:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002664:	2312      	movs	r3, #18
 8002666:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800266a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800266e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002670:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f7fe f8b3 	bl	80007e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800267a:	4622      	mov	r2, r4
 800267c:	4621      	mov	r1, r4
 800267e:	2017      	movs	r0, #23
 8002680:	f7fd ffb8 	bl	80005f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002684:	2017      	movs	r0, #23
 8002686:	f7fd ffe9 	bl	800065c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800268a:	4622      	mov	r2, r4
 800268c:	4621      	mov	r1, r4
 800268e:	2028      	movs	r0, #40	; 0x28
 8002690:	f7fd ffb0 	bl	80005f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002694:	2028      	movs	r0, #40	; 0x28
 8002696:	f7fd ffe1 	bl	800065c <HAL_NVIC_EnableIRQ>

}
 800269a:	b00d      	add	sp, #52	; 0x34
 800269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	48001000 	.word	0x48001000
 80026a8:	48000400 	.word	0x48000400
 80026ac:	10210000 	.word	0x10210000
 80026b0:	48000c00 	.word	0x48000c00
 80026b4:	48000800 	.word	0x48000800
 80026b8:	10110000 	.word	0x10110000

080026bc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026bc:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80026be:	4812      	ldr	r0, [pc, #72]	; (8002708 <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x10909CEC;
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <MX_I2C2_Init+0x50>)
 80026c2:	4913      	ldr	r1, [pc, #76]	; (8002710 <MX_I2C2_Init+0x54>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c4:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 80026c6:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ce:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d0:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026d2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026d4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026d6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026da:	f7fe f96f 	bl	80009bc <HAL_I2C_Init>
 80026de:	b108      	cbz	r0, 80026e4 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 80026e0:	f000 f9b2 	bl	8002a48 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026e4:	2100      	movs	r1, #0
 80026e6:	4808      	ldr	r0, [pc, #32]	; (8002708 <MX_I2C2_Init+0x4c>)
 80026e8:	f7fe f9b9 	bl	8000a5e <HAL_I2CEx_ConfigAnalogFilter>
 80026ec:	b108      	cbz	r0, 80026f2 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 80026ee:	f000 f9ab 	bl	8002a48 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026f2:	2100      	movs	r1, #0
 80026f4:	4804      	ldr	r0, [pc, #16]	; (8002708 <MX_I2C2_Init+0x4c>)
 80026f6:	f7fe f9d8 	bl	8000aaa <HAL_I2CEx_ConfigDigitalFilter>
 80026fa:	b118      	cbz	r0, 8002704 <MX_I2C2_Init+0x48>
  {
    Error_Handler();
  }

}
 80026fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002700:	f000 b9a2 	b.w	8002a48 <Error_Handler>
 8002704:	bd08      	pop	{r3, pc}
 8002706:	bf00      	nop
 8002708:	20000190 	.word	0x20000190
 800270c:	10909cec 	.word	0x10909cec
 8002710:	40005800 	.word	0x40005800

08002714 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271a:	2214      	movs	r2, #20
 800271c:	2100      	movs	r1, #0
 800271e:	a803      	add	r0, sp, #12
 8002720:	f000 ff6a 	bl	80035f8 <memset>
  if(i2cHandle->Instance==I2C2)
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_I2C_MspInit+0x60>)
 8002728:	429a      	cmp	r2, r3
 800272a:	d121      	bne.n	8002770 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272c:	4c12      	ldr	r4, [pc, #72]	; (8002778 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	4813      	ldr	r0, [pc, #76]	; (800277c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002730:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002738:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002742:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002746:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002748:	2312      	movs	r3, #18
 800274a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274c:	2301      	movs	r3, #1
 800274e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002756:	2304      	movs	r3, #4
 8002758:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	f7fe f841 	bl	80007e0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800275e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002764:	65a3      	str	r3, [r4, #88]	; 0x58
 8002766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002770:	b008      	add	sp, #32
 8002772:	bd10      	pop	{r4, pc}
 8002774:	40005800 	.word	0x40005800
 8002778:	40021000 	.word	0x40021000
 800277c:	48000400 	.word	0x48000400

08002780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002782:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002784:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002786:	2244      	movs	r2, #68	; 0x44
 8002788:	2100      	movs	r1, #0
 800278a:	a805      	add	r0, sp, #20
 800278c:	f000 ff34 	bl	80035f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002790:	4622      	mov	r2, r4
 8002792:	2100      	movs	r1, #0
 8002794:	4668      	mov	r0, sp
 8002796:	f000 ff2f 	bl	80035f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800279a:	2100      	movs	r1, #0
 800279c:	2288      	movs	r2, #136	; 0x88
 800279e:	a816      	add	r0, sp, #88	; 0x58
 80027a0:	f000 ff2a 	bl	80035f8 <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80027a4:	f7fe fa40 	bl	8000c28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027a8:	4a22      	ldr	r2, [pc, #136]	; (8002834 <SystemClock_Config+0xb4>)
 80027aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027ae:	f023 0318 	bic.w	r3, r3, #24
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80027b6:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027b8:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ba:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80027bc:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80027be:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027c0:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 80027c2:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027c4:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 80027c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027ca:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027cc:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027ce:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d0:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80027d2:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027d4:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027d6:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027d8:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027da:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027dc:	f7fe fb86 	bl	8000eec <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027e2:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e4:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027e6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e8:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ec:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ee:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f0:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027f2:	f7fe fda1 	bl	8001338 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <SystemClock_Config+0xb8>)
 80027f8:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80027fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027fe:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002800:	2318      	movs	r3, #24
 8002802:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002804:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002806:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800280a:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800280c:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800280e:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002810:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002812:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002814:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002816:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002818:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800281a:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800281c:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800281e:	f7fe ff53 	bl	80016c8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002826:	f7fe fa0f 	bl	8000c48 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800282a:	f7ff f935 	bl	8001a98 <HAL_RCCEx_EnableMSIPLLMode>
}
 800282e:	b039      	add	sp, #228	; 0xe4
 8002830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	00012085 	.word	0x00012085

0800283c <main>:
{
 800283c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  HAL_Init();
 8002840:	f7fd feb6 	bl	80005b0 <HAL_Init>
  	    count = 0;
 8002844:	4d6f      	ldr	r5, [pc, #444]	; (8002a04 <main+0x1c8>)
  	    devices = TM_OneWire_First(&OW);
 8002846:	4c70      	ldr	r4, [pc, #448]	; (8002a08 <main+0x1cc>)
  	    	TM_OneWire_GetFullROM(&OW, device[count - 1]);
 8002848:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8002a28 <main+0x1ec>
 800284c:	4e6f      	ldr	r6, [pc, #444]	; (8002a0c <main+0x1d0>)
  SystemClock_Config();
 800284e:	f7ff ff97 	bl	8002780 <SystemClock_Config>
  MX_GPIO_Init();
 8002852:	f7ff fddf 	bl	8002414 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8002856:	f7ff fd87 	bl	8002368 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800285a:	f7ff ff2f 	bl	80026bc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800285e:	f000 f8f5 	bl	8002a4c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8002862:	f000 f943 	bl	8002aec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002866:	f000 fd77 	bl	8003358 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800286a:	f000 fd93 	bl	8003394 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800286e:	f000 fe09 	bl	8003484 <MX_USB_OTG_FS_PCD_Init>
  	    TM_OneWire_Init(&OW, GPIOB, GPIO_PIN_4);
 8002872:	2210      	movs	r2, #16
 8002874:	4966      	ldr	r1, [pc, #408]	; (8002a10 <main+0x1d4>)
 8002876:	4865      	ldr	r0, [pc, #404]	; (8002a0c <main+0x1d0>)
 8002878:	f000 fc2a 	bl	80030d0 <TM_OneWire_Init>
  	    count = 0;
 800287c:	2300      	movs	r3, #0
  	    devices = TM_OneWire_First(&OW);
 800287e:	4863      	ldr	r0, [pc, #396]	; (8002a0c <main+0x1d0>)
  	    count = 0;
 8002880:	702b      	strb	r3, [r5, #0]
  	    devices = TM_OneWire_First(&OW);
 8002882:	f000 fd27 	bl	80032d4 <TM_OneWire_First>
 8002886:	7020      	strb	r0, [r4, #0]
  	    while(devices){
 8002888:	7827      	ldrb	r7, [r4, #0]
 800288a:	2f00      	cmp	r7, #0
 800288c:	d137      	bne.n	80028fe <main+0xc2>
  	    if(count > 0){
 800288e:	782b      	ldrb	r3, [r5, #0]
 8002890:	4c60      	ldr	r4, [pc, #384]	; (8002a14 <main+0x1d8>)
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06c      	beq.n	8002970 <main+0x134>
		  snprintf(str_tmp,100," Devices found: %d: \n\r", count);
 8002896:	4a60      	ldr	r2, [pc, #384]	; (8002a18 <main+0x1dc>)
 8002898:	4860      	ldr	r0, [pc, #384]	; (8002a1c <main+0x1e0>)
		  for(j = 0; j < count; j++){
 800289a:	4e61      	ldr	r6, [pc, #388]	; (8002a20 <main+0x1e4>)
				snprintf(str_tmp,100," 0x%02X ", device[j][i]);
 800289c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002a44 <main+0x208>
		  snprintf(str_tmp,100," Devices found: %d: \n\r", count);
 80028a0:	2164      	movs	r1, #100	; 0x64
 80028a2:	f000 ff6d 	bl	8003780 <sniprintf>
		  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 80028a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028aa:	2264      	movs	r2, #100	; 0x64
 80028ac:	495b      	ldr	r1, [pc, #364]	; (8002a1c <main+0x1e0>)
 80028ae:	485d      	ldr	r0, [pc, #372]	; (8002a24 <main+0x1e8>)
 80028b0:	f7ff fb69 	bl	8001f86 <HAL_UART_Transmit>
		  for(j = 0; j < count; j++){
 80028b4:	7037      	strb	r7, [r6, #0]
				snprintf(str_tmp,100," 0x%02X ", device[j][i]);
 80028b6:	4f5c      	ldr	r7, [pc, #368]	; (8002a28 <main+0x1ec>)
		  for(j = 0; j < count; j++){
 80028b8:	7832      	ldrb	r2, [r6, #0]
 80028ba:	782b      	ldrb	r3, [r5, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d32d      	bcc.n	800291c <main+0xe0>
  	    for(i=0; i < count; i++){
 80028c0:	2300      	movs	r3, #0
  	    	TM_DS18B20_SetResolution(&OW, device[i], TM_DS18B20_Resolution_12bits);
 80028c2:	4e59      	ldr	r6, [pc, #356]	; (8002a28 <main+0x1ec>)
 80028c4:	4f51      	ldr	r7, [pc, #324]	; (8002a0c <main+0x1d0>)
  	    for(i=0; i < count; i++){
 80028c6:	7023      	strb	r3, [r4, #0]
 80028c8:	7821      	ldrb	r1, [r4, #0]
 80028ca:	782b      	ldrb	r3, [r5, #0]
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d85b      	bhi.n	8002988 <main+0x14c>
	  TM_DS18B20_StartAll(&OW);
 80028d0:	4e4e      	ldr	r6, [pc, #312]	; (8002a0c <main+0x1d0>)
		  if (TM_DS18B20_Read(&OW, device[i], &temps[i])) {
 80028d2:	4f56      	ldr	r7, [pc, #344]	; (8002a2c <main+0x1f0>)
	  TM_DS18B20_StartAll(&OW);
 80028d4:	4630      	mov	r0, r6
 80028d6:	f000 fa47 	bl	8002d68 <TM_DS18B20_StartAll>
	  while(!TM_DS18B20_AllDone(&OW));
 80028da:	4630      	mov	r0, r6
 80028dc:	f000 fb3c 	bl	8002f58 <TM_DS18B20_AllDone>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d0fa      	beq.n	80028da <main+0x9e>
	  for(i=0; i < count; i++){
 80028e4:	2300      	movs	r3, #0
		  if (TM_DS18B20_Read(&OW, device[i], &temps[i])) {
 80028e6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8002a28 <main+0x1ec>
	  for(i=0; i < count; i++){
 80028ea:	7023      	strb	r3, [r4, #0]
 80028ec:	7821      	ldrb	r1, [r4, #0]
 80028ee:	782b      	ldrb	r3, [r5, #0]
 80028f0:	428b      	cmp	r3, r1
 80028f2:	d853      	bhi.n	800299c <main+0x160>
	  HAL_Delay (1000);
 80028f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028f8:	f000 fa18 	bl	8002d2c <HAL_Delay>
	  TM_DS18B20_StartAll(&OW);
 80028fc:	e7ea      	b.n	80028d4 <main+0x98>
  	    	count++;
 80028fe:	7829      	ldrb	r1, [r5, #0]
 8002900:	3101      	adds	r1, #1
 8002902:	b2c9      	uxtb	r1, r1
 8002904:	7029      	strb	r1, [r5, #0]
  	    	TM_OneWire_GetFullROM(&OW, device[count - 1]);
 8002906:	3901      	subs	r1, #1
 8002908:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 800290c:	4630      	mov	r0, r6
 800290e:	f000 fcfb 	bl	8003308 <TM_OneWire_GetFullROM>
  	    	devices = TM_OneWire_Next(&OW);
 8002912:	4630      	mov	r0, r6
 8002914:	f000 fce5 	bl	80032e2 <TM_OneWire_Next>
 8002918:	7020      	strb	r0, [r4, #0]
 800291a:	e7b5      	b.n	8002888 <main+0x4c>
			  for(i = 0 ; i < 8; i++){
 800291c:	2300      	movs	r3, #0
				snprintf(str_tmp,100," 0x%02X ", device[j][i]);
 800291e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002a1c <main+0x1e0>
			  for(i = 0 ; i < 8; i++){
 8002922:	7023      	strb	r3, [r4, #0]
 8002924:	7822      	ldrb	r2, [r4, #0]
 8002926:	2a07      	cmp	r2, #7
 8002928:	d90e      	bls.n	8002948 <main+0x10c>
			snprintf(str_tmp,100,"\n ");
 800292a:	4941      	ldr	r1, [pc, #260]	; (8002a30 <main+0x1f4>)
 800292c:	483b      	ldr	r0, [pc, #236]	; (8002a1c <main+0x1e0>)
 800292e:	f000 ff5b 	bl	80037e8 <strcpy>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 8002932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002936:	2264      	movs	r2, #100	; 0x64
 8002938:	4938      	ldr	r1, [pc, #224]	; (8002a1c <main+0x1e0>)
 800293a:	483a      	ldr	r0, [pc, #232]	; (8002a24 <main+0x1e8>)
 800293c:	f7ff fb23 	bl	8001f86 <HAL_UART_Transmit>
		  for(j = 0; j < count; j++){
 8002940:	7833      	ldrb	r3, [r6, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	7033      	strb	r3, [r6, #0]
 8002946:	e7b7      	b.n	80028b8 <main+0x7c>
				snprintf(str_tmp,100," 0x%02X ", device[j][i]);
 8002948:	7833      	ldrb	r3, [r6, #0]
 800294a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800294e:	2164      	movs	r1, #100	; 0x64
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	4648      	mov	r0, r9
 8002954:	4642      	mov	r2, r8
 8002956:	f000 ff13 	bl	8003780 <sniprintf>
				HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 800295a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295e:	2264      	movs	r2, #100	; 0x64
 8002960:	4649      	mov	r1, r9
 8002962:	4830      	ldr	r0, [pc, #192]	; (8002a24 <main+0x1e8>)
 8002964:	f7ff fb0f 	bl	8001f86 <HAL_UART_Transmit>
			  for(i = 0 ; i < 8; i++){
 8002968:	7823      	ldrb	r3, [r4, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	7023      	strb	r3, [r4, #0]
 800296e:	e7d9      	b.n	8002924 <main+0xe8>
  	    	snprintf(str_tmp,100," No devices found. ");
 8002970:	4930      	ldr	r1, [pc, #192]	; (8002a34 <main+0x1f8>)
 8002972:	482a      	ldr	r0, [pc, #168]	; (8002a1c <main+0x1e0>)
 8002974:	f000 ff38 	bl	80037e8 <strcpy>
  	    	HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 8002978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297c:	2264      	movs	r2, #100	; 0x64
 800297e:	4927      	ldr	r1, [pc, #156]	; (8002a1c <main+0x1e0>)
 8002980:	4828      	ldr	r0, [pc, #160]	; (8002a24 <main+0x1e8>)
 8002982:	f7ff fb00 	bl	8001f86 <HAL_UART_Transmit>
 8002986:	e79b      	b.n	80028c0 <main+0x84>
  	    	TM_DS18B20_SetResolution(&OW, device[i], TM_DS18B20_Resolution_12bits);
 8002988:	220c      	movs	r2, #12
 800298a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800298e:	4638      	mov	r0, r7
 8002990:	f000 fa7a 	bl	8002e88 <TM_DS18B20_SetResolution>
  	    for(i=0; i < count; i++){
 8002994:	7823      	ldrb	r3, [r4, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	7023      	strb	r3, [r4, #0]
 800299a:	e795      	b.n	80028c8 <main+0x8c>
		  if (TM_DS18B20_Read(&OW, device[i], &temps[i])) {
 800299c:	b209      	sxth	r1, r1
 800299e:	eb07 0281 	add.w	r2, r7, r1, lsl #2
 80029a2:	4630      	mov	r0, r6
 80029a4:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 80029a8:	f000 f9ec 	bl	8002d84 <TM_DS18B20_Read>
 80029ac:	b320      	cbz	r0, 80029f8 <main+0x1bc>
			   int tmpInt1 = trunc(temps[i]);
 80029ae:	7823      	ldrb	r3, [r4, #0]
			   snprintf(str_tmp,100,"TEMPERATURE %d: %d.%02d\n\r", i, tmpInt1, tmpInt2);
 80029b0:	481a      	ldr	r0, [pc, #104]	; (8002a1c <main+0x1e0>)
			   int tmpInt1 = trunc(temps[i]);
 80029b2:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80029b6:	edd2 7a00 	vldr	s15, [r2]
			   snprintf(str_tmp,100,"TEMPERATURE %d: %d.%02d\n\r", i, tmpInt1, tmpInt2);
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <main+0x1fc>)
			   int tmpInt1 = trunc(temps[i]);
 80029bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
			   snprintf(str_tmp,100,"TEMPERATURE %d: %d.%02d\n\r", i, tmpInt1, tmpInt2);
 80029c0:	2164      	movs	r1, #100	; 0x64
			   float tmpFrac = temps[i] - tmpInt1;
 80029c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
			   snprintf(str_tmp,100,"TEMPERATURE %d: %d.%02d\n\r", i, tmpInt1, tmpInt2);
 80029c6:	ed8d 7a00 	vstr	s14, [sp]
			   float tmpFrac = temps[i] - tmpInt1;
 80029ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
			   int tmpInt2 = trunc(tmpFrac * 100);
 80029ce:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a3c <main+0x200>
 80029d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			   snprintf(str_tmp,100,"TEMPERATURE %d: %d.%02d\n\r", i, tmpInt1, tmpInt2);
 80029da:	edcd 7a01 	vstr	s15, [sp, #4]
 80029de:	f000 fecf 	bl	8003780 <sniprintf>
			  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 80029e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e6:	2264      	movs	r2, #100	; 0x64
 80029e8:	490c      	ldr	r1, [pc, #48]	; (8002a1c <main+0x1e0>)
 80029ea:	480e      	ldr	r0, [pc, #56]	; (8002a24 <main+0x1e8>)
 80029ec:	f7ff facb 	bl	8001f86 <HAL_UART_Transmit>
	  for(i=0; i < count; i++){
 80029f0:	7823      	ldrb	r3, [r4, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	7023      	strb	r3, [r4, #0]
 80029f6:	e779      	b.n	80028ec <main+0xb0>
			  snprintf(str_tmp,100,"Reading error;\n");
 80029f8:	4911      	ldr	r1, [pc, #68]	; (8002a40 <main+0x204>)
 80029fa:	4808      	ldr	r0, [pc, #32]	; (8002a1c <main+0x1e0>)
 80029fc:	f000 fef4 	bl	80037e8 <strcpy>
 8002a00:	e7ef      	b.n	80029e2 <main+0x1a6>
 8002a02:	bf00      	nop
 8002a04:	20000200 	.word	0x20000200
 8002a08:	20000201 	.word	0x20000201
 8002a0c:	200001e0 	.word	0x200001e0
 8002a10:	48000400 	.word	0x48000400
 8002a14:	200001f4 	.word	0x200001f4
 8002a18:	08003eb5 	.word	0x08003eb5
 8002a1c:	200000ac 	.word	0x200000ac
 8002a20:	200001dc 	.word	0x200001dc
 8002a24:	20000334 	.word	0x20000334
 8002a28:	20000202 	.word	0x20000202
 8002a2c:	200001f8 	.word	0x200001f8
 8002a30:	08003ed5 	.word	0x08003ed5
 8002a34:	08003ed8 	.word	0x08003ed8
 8002a38:	08003eec 	.word	0x08003eec
 8002a3c:	42c80000 	.word	0x42c80000
 8002a40:	08003f06 	.word	0x08003f06
 8002a44:	08003ecc 	.word	0x08003ecc

08002a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a48:	4770      	bx	lr
	...

08002a4c <MX_QUADSPI_Init>:

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{

  hqspi.Instance = QUADSPI;
 8002a4c:	480a      	ldr	r0, [pc, #40]	; (8002a78 <MX_QUADSPI_Init+0x2c>)
  hqspi.Init.ClockPrescaler = 255;
 8002a4e:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <MX_QUADSPI_Init+0x30>)
{
 8002a50:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 255;
 8002a52:	23ff      	movs	r3, #255	; 0xff
 8002a54:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002a58:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002a5e:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8002a60:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002a62:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002a64:	6183      	str	r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002a66:	f7fe f953 	bl	8000d10 <HAL_QSPI_Init>
 8002a6a:	b118      	cbz	r0, 8002a74 <MX_QUADSPI_Init+0x28>
  {
    Error_Handler();
  }

}
 8002a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002a70:	f7ff bfea 	b.w	8002a48 <Error_Handler>
 8002a74:	bd08      	pop	{r3, pc}
 8002a76:	bf00      	nop
 8002a78:	20000214 	.word	0x20000214
 8002a7c:	a0001000 	.word	0xa0001000

08002a80 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002a80:	b510      	push	{r4, lr}
 8002a82:	4604      	mov	r4, r0
 8002a84:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	2214      	movs	r2, #20
 8002a88:	2100      	movs	r1, #0
 8002a8a:	a803      	add	r0, sp, #12
 8002a8c:	f000 fdb4 	bl	80035f8 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <HAL_QSPI_MspInit+0x64>)
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d122      	bne.n	8002ade <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002a98:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8002a9c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa0:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8002aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002ab2:	9201      	str	r2, [sp, #4]
 8002ab4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ab8:	f042 0210 	orr.w	r2, r2, #16
 8002abc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8002ac8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002acc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ad6:	230a      	movs	r3, #10
 8002ad8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ada:	f7fd fe81 	bl	80007e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002ade:	b008      	add	sp, #32
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	a0001000 	.word	0xa0001000
 8002ae8:	48001000 	.word	0x48001000

08002aec <MX_SPI3_Init>:

/* SPI3 init function */
void MX_SPI3_Init(void)
{

  hspi3.Instance = SPI3;
 8002aec:	4810      	ldr	r0, [pc, #64]	; (8002b30 <MX_SPI3_Init+0x44>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002aee:	4911      	ldr	r1, [pc, #68]	; (8002b34 <MX_SPI3_Init+0x48>)
{
 8002af0:	b508      	push	{r3, lr}
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002af2:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002af6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002afa:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002afe:	60c2      	str	r2, [r0, #12]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b00:	2300      	movs	r3, #0
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b06:	6083      	str	r3, [r0, #8]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b08:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b0a:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b0c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b0e:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b10:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b12:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b14:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002b16:	2207      	movs	r2, #7
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b18:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b1a:	2308      	movs	r3, #8
  hspi3.Init.CRCPolynomial = 7;
 8002b1c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b1e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b20:	f7fe ffc2 	bl	8001aa8 <HAL_SPI_Init>
 8002b24:	b118      	cbz	r0, 8002b2e <MX_SPI3_Init+0x42>
  {
    Error_Handler();
  }

}
 8002b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002b2a:	f7ff bf8d 	b.w	8002a48 <Error_Handler>
 8002b2e:	bd08      	pop	{r3, pc}
 8002b30:	20000258 	.word	0x20000258
 8002b34:	40003c00 	.word	0x40003c00

08002b38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3e:	2214      	movs	r2, #20
 8002b40:	2100      	movs	r1, #0
 8002b42:	a803      	add	r0, sp, #12
 8002b44:	f000 fd58 	bl	80035f8 <memset>
  if(spiHandle->Instance==SPI3)
 8002b48:	6822      	ldr	r2, [r4, #0]
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_SPI_MspInit+0x60>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d120      	bne.n	8002b92 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b50:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b54:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b58:	4810      	ldr	r0, [pc, #64]	; (8002b9c <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b62:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002b66:	9201      	str	r2, [sp, #4]
 8002b68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b6c:	f042 0204 	orr.w	r2, r2, #4
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	9302      	str	r3, [sp, #8]
 8002b7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002b7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8e:	f7fd fe27 	bl	80007e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002b92:	b008      	add	sp, #32
 8002b94:	bd10      	pop	{r4, pc}
 8002b96:	bf00      	nop
 8002b98:	40003c00 	.word	0x40003c00
 8002b9c:	48000800 	.word	0x48000800

08002ba0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_MspInit+0x2c>)
 8002ba2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60
 8002baa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002bac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	f002 0201 	and.w	r2, r2, #1
 8002bb2:	9200      	str	r2, [sp, #0]
 8002bb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc8:	b002      	add	sp, #8
 8002bca:	4770      	bx	lr
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <NMI_Handler>:
 8002bd0:	4770      	bx	lr

08002bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd2:	e7fe      	b.n	8002bd2 <HardFault_Handler>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	e7fe      	b.n	8002bd4 <MemManage_Handler>

08002bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd6:	e7fe      	b.n	8002bd6 <BusFault_Handler>

08002bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd8:	e7fe      	b.n	8002bd8 <UsageFault_Handler>

08002bda <SVC_Handler>:
 8002bda:	4770      	bx	lr

08002bdc <DebugMon_Handler>:
 8002bdc:	4770      	bx	lr

08002bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bde:	4770      	bx	lr

08002be0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be0:	f000 b86c 	b.w	8002cbc <HAL_IncTick>

08002be4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002be6:	2020      	movs	r0, #32
 8002be8:	f7fd fedc 	bl	80009a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002bec:	2040      	movs	r0, #64	; 0x40
 8002bee:	f7fd fed9 	bl	80009a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002bf2:	2080      	movs	r0, #128	; 0x80
 8002bf4:	f7fd fed6 	bl	80009a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002bf8:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c00:	f7fd bed0 	b.w	80009a4 <HAL_GPIO_EXTI_IRQHandler>

08002c04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002c06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c0a:	f7fd fecb 	bl	80009a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002c0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c12:	f7fd fec7 	bl	80009a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c1a:	f7fd fec3 	bl	80009a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002c1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c22:	f7fd febf 	bl	80009a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002c26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002c2e:	f7fd beb9 	b.w	80009a4 <HAL_GPIO_EXTI_IRQHandler>
	...

08002c34 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c34:	490f      	ldr	r1, [pc, #60]	; (8002c74 <SystemInit+0x40>)
 8002c36:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <SystemInit+0x44>)
 8002c44:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002c46:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002c4e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002c56:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002c5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c68:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002c6a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c70:	608b      	str	r3, [r1, #8]
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	40021000 	.word	0x40021000

08002c7c <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <TM_DELAY_Init+0x34>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002c84:	60da      	str	r2, [r3, #12]
    CoreDebug->DEMCR |=  0x01000000;
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c8c:	60da      	str	r2, [r3, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <TM_DELAY_Init+0x38>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8002ca4:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8002ca6:	bf00      	nop
	__ASM volatile ("NOP");
 8002ca8:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8002caa:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 8002cac:	1a80      	subs	r0, r0, r2
 8002cae:	4770      	bx	lr
 8002cb0:	e000edf0 	.word	0xe000edf0
 8002cb4:	e0001000 	.word	0xe0001000

08002cb8 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 8002cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 8002cc0:	6813      	ldr	r3, [r2, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_IncTick+0x68>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	b112      	cbz	r2, 8002cd2 <HAL_IncTick+0x16>
		TM_Time2--;
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002cd2:	4e15      	ldr	r6, [pc, #84]	; (8002d28 <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 8002cd4:	2500      	movs	r5, #0
 8002cd6:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 8002cd8:	7833      	ldrb	r3, [r6, #0]
 8002cda:	b2ec      	uxtb	r4, r5
 8002cdc:	42a3      	cmp	r3, r4
 8002cde:	d802      	bhi.n	8002ce6 <HAL_IncTick+0x2a>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8002ce0:	f7ff ffea 	bl	8002cb8 <TM_DELAY_1msHandler>
 8002ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002ce6:	00a4      	lsls	r4, r4, #2
 8002ce8:	1933      	adds	r3, r6, r4
 8002cea:	6858      	ldr	r0, [r3, #4]
		if (
 8002cec:	b1b0      	cbz	r0, 8002d1c <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002cee:	7803      	ldrb	r3, [r0, #0]
 8002cf0:	079b      	lsls	r3, r3, #30
 8002cf2:	d513      	bpl.n	8002d1c <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 8002cf4:	6883      	ldr	r3, [r0, #8]
 8002cf6:	b10b      	cbz	r3, 8002cfc <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002cfc:	6883      	ldr	r3, [r0, #8]
 8002cfe:	b96b      	cbnz	r3, 8002d1c <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002d00:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8002d02:	68c3      	ldr	r3, [r0, #12]
 8002d04:	6901      	ldr	r1, [r0, #16]
 8002d06:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002d08:	6862      	ldr	r2, [r4, #4]
 8002d0a:	6853      	ldr	r3, [r2, #4]
 8002d0c:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8002d0e:	7813      	ldrb	r3, [r2, #0]
 8002d10:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8002d14:	bf04      	itt	eq
 8002d16:	f361 0341 	bfieq	r3, r1, #1, #1
 8002d1a:	7013      	strbeq	r3, [r2, #0]
 8002d1c:	3501      	adds	r5, #1
 8002d1e:	e7db      	b.n	8002cd8 <HAL_IncTick+0x1c>
 8002d20:	20000128 	.word	0x20000128
 8002d24:	2000012c 	.word	0x2000012c
 8002d28:	20000110 	.word	0x20000110

08002d2c <HAL_Delay>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d2c:	f3ef 8305 	mrs	r3, IPSR
}

void HAL_Delay(uint32_t Delay) {
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 8002d30:	b113      	cbz	r3, 8002d38 <HAL_Delay+0xc>
		}
	} else {
		/* Called from interrupt mode */
		while (Delay) {
			/* Check if timer reached zero after we last checked COUNTFLAG bit */
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_Delay+0x28>)
		while (Delay) {
 8002d34:	b938      	cbnz	r0, 8002d46 <HAL_Delay+0x1a>
 8002d36:	4770      	bx	lr
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_Delay+0x2c>)
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
		while ((HAL_GetTick() - tickstart) < Delay) {
 8002d3e:	1a52      	subs	r2, r2, r1
 8002d40:	4290      	cmp	r0, r2
 8002d42:	d8fb      	bhi.n	8002d3c <HAL_Delay+0x10>
 8002d44:	4770      	bx	lr
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	03d2      	lsls	r2, r2, #15
				Delay--;
 8002d4a:	bf48      	it	mi
 8002d4c:	f100 30ff 	addmi.w	r0, r0, #4294967295	; 0xffffffff
 8002d50:	e7f0      	b.n	8002d34 <HAL_Delay+0x8>
 8002d52:	bf00      	nop
 8002d54:	e000e010 	.word	0xe000e010
 8002d58:	20000128 	.word	0x20000128

08002d5c <HAL_GetTick>:
	return TM_Time;
 8002d5c:	4b01      	ldr	r3, [pc, #4]	; (8002d64 <HAL_GetTick+0x8>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000128 	.word	0x20000128

08002d68 <TM_DS18B20_StartAll>:
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
	
	return 1;
}

void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
	/* Reset pulse */
	TM_OneWire_Reset(OneWire);
 8002d6c:	f000 f9c2 	bl	80030f4 <TM_OneWire_Reset>
	/* Skip rom */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002d70:	4620      	mov	r0, r4
 8002d72:	21cc      	movs	r1, #204	; 0xcc
 8002d74:	f000 fa22 	bl	80031bc <TM_OneWire_WriteByte>
	/* Start conversion on all connected devices */
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002d78:	4620      	mov	r0, r4
 8002d7a:	2144      	movs	r1, #68	; 0x44
}
 8002d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002d80:	f000 ba1c 	b.w	80031bc <TM_OneWire_WriteByte>

08002d84 <TM_DS18B20_Read>:

uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002d84:	b5f0      	push	{r4, r5, r6, r7, lr}
	return 1;
}

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	4615      	mov	r5, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002d92:	d010      	beq.n	8002db6 <TM_DS18B20_Read+0x32>
		return 0;
 8002d94:	2000      	movs	r0, #0
}
 8002d96:	b005      	add	sp, #20
 8002d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
			decimal = (temperature >> 1) & 0x07;
 8002d9a:	f3c4 0242 	ubfx	r2, r4, #1, #3
 8002d9e:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002da2:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
		} break;
 8002da6:	e05d      	b.n	8002e64 <TM_DS18B20_Read+0xe0>
			decimal = temperature & 0x0F;
 8002da8:	f004 020f 	and.w	r2, r4, #15
 8002dac:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002db0:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
		} break;
 8002db4:	e056      	b.n	8002e64 <TM_DS18B20_Read+0xe0>
	if (!TM_OneWire_ReadBit(OneWire)) {
 8002db6:	f000 f9e3 	bl	8003180 <TM_OneWire_ReadBit>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d0ea      	beq.n	8002d94 <TM_DS18B20_Read+0x10>
	TM_OneWire_Reset(OneWire);
 8002dbe:	4638      	mov	r0, r7
 8002dc0:	f000 f998 	bl	80030f4 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	f000 fa8e 	bl	80032e8 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002dcc:	21be      	movs	r1, #190	; 0xbe
 8002dce:	4638      	mov	r0, r7
 8002dd0:	f000 f9f4 	bl	80031bc <TM_OneWire_WriteByte>
 8002dd4:	2400      	movs	r4, #0
		data[i] = TM_OneWire_ReadByte(OneWire);
 8002dd6:	ae01      	add	r6, sp, #4
 8002dd8:	4638      	mov	r0, r7
 8002dda:	f000 f9ff 	bl	80031dc <TM_OneWire_ReadByte>
 8002dde:	5530      	strb	r0, [r6, r4]
 8002de0:	3401      	adds	r4, #1
	for (i = 0; i < 9; i++) {
 8002de2:	2c09      	cmp	r4, #9
 8002de4:	d1f8      	bne.n	8002dd8 <TM_DS18B20_Read+0x54>
	crc = TM_OneWire_CRC8(data, 8);
 8002de6:	2108      	movs	r1, #8
 8002de8:	4630      	mov	r0, r6
 8002dea:	f000 fa98 	bl	800331e <TM_OneWire_CRC8>
	if (crc != data[8]) {
 8002dee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002df2:	4283      	cmp	r3, r0
 8002df4:	d1ce      	bne.n	8002d94 <TM_DS18B20_Read+0x10>
	temperature = data[0] | (data[1] << 8);
 8002df6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002dfa:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8002dfe:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8002e02:	b236      	sxth	r6, r6
	TM_OneWire_Reset(OneWire);
 8002e04:	4638      	mov	r0, r7
 8002e06:	f000 f975 	bl	80030f4 <TM_OneWire_Reset>
	temperature = data[0] | (data[1] << 8);
 8002e0a:	b2b4      	uxth	r4, r6
	if (temperature & 0x8000) {
 8002e0c:	2e00      	cmp	r6, #0
		temperature = ~temperature + 1;
 8002e0e:	bfbc      	itt	lt
 8002e10:	4264      	neglt	r4, r4
 8002e12:	b2a4      	uxthlt	r4, r4
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002e14:	ea4f 1314 	mov.w	r3, r4, lsr #4
 8002e18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e1c:	f344 1307 	sbfx	r3, r4, #4, #8
 8002e20:	ea43 0302 	orr.w	r3, r3, r2
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002e24:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002e28:	f3c2 1241 	ubfx	r2, r2, #5, #2
	switch (resolution) {
 8002e2c:	f102 0209 	add.w	r2, r2, #9
		minus = 1;
 8002e30:	bfb4      	ite	lt
 8002e32:	2101      	movlt	r1, #1
	int8_t digit, minus = 0;
 8002e34:	2100      	movge	r1, #0
	switch (resolution) {
 8002e36:	2a0b      	cmp	r2, #11
 8002e38:	d0af      	beq.n	8002d9a <TM_DS18B20_Read+0x16>
 8002e3a:	2a0c      	cmp	r2, #12
 8002e3c:	d0b4      	beq.n	8002da8 <TM_DS18B20_Read+0x24>
 8002e3e:	2a0a      	cmp	r2, #10
			decimal = (temperature >> 3) & 0x01;
 8002e40:	bf1b      	ittet	ne
 8002e42:	f3c4 02c0 	ubfxne	r2, r4, #3, #1
 8002e46:	ee07 2a90 	vmovne	s15, r2
			decimal = (temperature >> 2) & 0x03;
 8002e4a:	f3c4 0281 	ubfxeq	r2, r4, #2, #2
			decimal = (temperature >> 3) & 0x01;
 8002e4e:	eef8 7ae7 	vcvtne.f32.s32	s15, s15
			decimal = (temperature >> 2) & 0x03;
 8002e52:	bf0d      	iteet	eq
 8002e54:	ee07 2a90 	vmoveq	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002e58:	eeb6 7a00 	vmovne.f32	s14, #96	; 0x3f000000  0.5
 8002e5c:	ee67 7a87 	vmulne.f32	s15, s15, s14
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002e60:	eefa 7acf 	vcvteq.f32.s32	s15, s15, #2
	decimal = digit + decimal;
 8002e64:	ee07 3a10 	vmov	s14, r3
 8002e68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
	if (minus) {
 8002e70:	b119      	cbz	r1, 8002e7a <TM_DS18B20_Read+0xf6>
		decimal = 0 - decimal;
 8002e72:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002e84 <TM_DS18B20_Read+0x100>
 8002e76:	ee77 7a67 	vsub.f32	s15, s14, s15
	*destination = decimal;
 8002e7a:	edc5 7a00 	vstr	s15, [r5]
	return 1;
 8002e7e:	2001      	movs	r0, #1
 8002e80:	e789      	b.n	8002d96 <TM_DS18B20_Read+0x12>
 8002e82:	bf00      	nop
 8002e84:	00000000 	.word	0x00000000

08002e88 <TM_DS18B20_SetResolution>:
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002e8c:	780b      	ldrb	r3, [r1, #0]
 8002e8e:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002e90:	4604      	mov	r4, r0
 8002e92:	460e      	mov	r6, r1
 8002e94:	4691      	mov	r9, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002e96:	d019      	beq.n	8002ecc <TM_DS18B20_SetResolution+0x44>
		return 0;
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 8002e9e:	f1b9 0f0a 	cmp.w	r9, #10
 8002ea2:	d104      	bne.n	8002eae <TM_DS18B20_SetResolution+0x26>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002ea4:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ea8:	f045 0520 	orr.w	r5, r5, #32
 8002eac:	e02f      	b.n	8002f0e <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 8002eae:	f1b9 0f0b 	cmp.w	r9, #11
 8002eb2:	d104      	bne.n	8002ebe <TM_DS18B20_SetResolution+0x36>
 8002eb4:	f005 05df 	and.w	r5, r5, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002eb8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002ebc:	e027      	b.n	8002f0e <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 8002ebe:	f1b9 0f0c 	cmp.w	r9, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ec2:	bf04      	itt	eq
 8002ec4:	f045 0560 	orreq.w	r5, r5, #96	; 0x60
 8002ec8:	b2ed      	uxtbeq	r5, r5
 8002eca:	e020      	b.n	8002f0e <TM_DS18B20_SetResolution+0x86>
	TM_OneWire_Reset(OneWire);
 8002ecc:	f000 f912 	bl	80030f4 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 fa08 	bl	80032e8 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002ed8:	21be      	movs	r1, #190	; 0xbe
 8002eda:	4620      	mov	r0, r4
 8002edc:	f000 f96e 	bl	80031bc <TM_OneWire_WriteByte>
	TM_OneWire_ReadByte(OneWire);
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f000 f97b 	bl	80031dc <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f000 f978 	bl	80031dc <TM_OneWire_ReadByte>
	th = TM_OneWire_ReadByte(OneWire);
 8002eec:	4620      	mov	r0, r4
 8002eee:	f000 f975 	bl	80031dc <TM_OneWire_ReadByte>
 8002ef2:	4607      	mov	r7, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f000 f971 	bl	80031dc <TM_OneWire_ReadByte>
 8002efa:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8002efc:	4620      	mov	r0, r4
 8002efe:	f000 f96d 	bl	80031dc <TM_OneWire_ReadByte>
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002f02:	f1b9 0f09 	cmp.w	r9, #9
	conf = TM_OneWire_ReadByte(OneWire);
 8002f06:	4605      	mov	r5, r0
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002f08:	d1c9      	bne.n	8002e9e <TM_DS18B20_SetResolution+0x16>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002f0a:	f005 059f 	and.w	r5, r5, #159	; 0x9f
	TM_OneWire_Reset(OneWire);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f000 f8f0 	bl	80030f4 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002f14:	4631      	mov	r1, r6
 8002f16:	4620      	mov	r0, r4
 8002f18:	f000 f9e6 	bl	80032e8 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	214e      	movs	r1, #78	; 0x4e
 8002f20:	f000 f94c 	bl	80031bc <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, th);
 8002f24:	4639      	mov	r1, r7
 8002f26:	4620      	mov	r0, r4
 8002f28:	f000 f948 	bl	80031bc <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 f944 	bl	80031bc <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002f34:	4629      	mov	r1, r5
 8002f36:	4620      	mov	r0, r4
 8002f38:	f000 f940 	bl	80031bc <TM_OneWire_WriteByte>
	TM_OneWire_Reset(OneWire);
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f000 f8d9 	bl	80030f4 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002f42:	4631      	mov	r1, r6
 8002f44:	4620      	mov	r0, r4
 8002f46:	f000 f9cf 	bl	80032e8 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	2148      	movs	r1, #72	; 0x48
 8002f4e:	f000 f935 	bl	80031bc <TM_OneWire_WriteByte>
	return 1;
 8002f52:	2001      	movs	r0, #1
 8002f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002f58 <TM_DS18B20_AllDone>:
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 8002f58:	f000 b912 	b.w	8003180 <TM_OneWire_ReadBit>

08002f5c <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002f5c:	b530      	push	{r4, r5, lr}
 8002f5e:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8002f60:	2503      	movs	r5, #3
		if (GPIO_Pin & (1 << i)) {
 8002f62:	fa41 f203 	asr.w	r2, r1, r3
 8002f66:	07d2      	lsls	r2, r2, #31
 8002f68:	d506      	bpl.n	8002f78 <TM_GPIO_SetPinAsInput+0x1c>
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8002f6a:	6802      	ldr	r2, [r0, #0]
 8002f6c:	005c      	lsls	r4, r3, #1
 8002f6e:	fa05 f404 	lsl.w	r4, r5, r4
 8002f72:	ea22 0204 	bic.w	r2, r2, r4
 8002f76:	6002      	str	r2, [r0, #0]
 8002f78:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d1f1      	bne.n	8002f62 <TM_GPIO_SetPinAsInput+0x6>
		}
	}
}
 8002f7e:	bd30      	pop	{r4, r5, pc}

08002f80 <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f82:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8002f84:	2503      	movs	r5, #3
 8002f86:	2601      	movs	r6, #1
		if (GPIO_Pin & (1 << i)) {
 8002f88:	fa41 f203 	asr.w	r2, r1, r3
 8002f8c:	07d2      	lsls	r2, r2, #31
 8002f8e:	d509      	bpl.n	8002fa4 <TM_GPIO_SetPinAsOutput+0x24>
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8002f90:	6802      	ldr	r2, [r0, #0]
 8002f92:	005c      	lsls	r4, r3, #1
 8002f94:	fa05 f704 	lsl.w	r7, r5, r4
 8002f98:	ea22 0207 	bic.w	r2, r2, r7
 8002f9c:	fa06 f404 	lsl.w	r4, r6, r4
 8002fa0:	4322      	orrs	r2, r4
 8002fa2:	6002      	str	r2, [r0, #0]
 8002fa4:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d1ee      	bne.n	8002f88 <TM_GPIO_SetPinAsOutput+0x8>
		}
	}
}
 8002faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fac <TM_GPIO_INT_EnableClock>:
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <TM_GPIO_INT_EnableClock+0x14>)
 8002fae:	f3c0 218f 	ubfx	r1, r0, #10, #16
 8002fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	4088      	lsls	r0, r1
 8002fb8:	4310      	orrs	r0, r2
 8002fba:	6498      	str	r0, [r3, #72]	; 0x48
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc8:	b085      	sub	sp, #20
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002fca:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002fce:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8002fd2:	9402      	str	r4, [sp, #8]
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002fd4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003064 <TM_GPIO_INT_Init+0xa0>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002fd8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8002fdc:	9403      	str	r4, [sp, #12]
 8002fde:	9301      	str	r3, [sp, #4]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002fe0:	2400      	movs	r4, #0
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002fe2:	f3c0 2c87 	ubfx	ip, r0, #10, #8
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002fe6:	f04f 0a03 	mov.w	sl, #3
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002fea:	fa5f fe8e 	uxtb.w	lr, lr
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8002fee:	fa41 f504 	asr.w	r5, r1, r4
 8002ff2:	07eb      	lsls	r3, r5, #31
 8002ff4:	d530      	bpl.n	8003058 <TM_GPIO_INT_Init+0x94>
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f838 501c 	ldrh.w	r5, [r8, ip, lsl #1]
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002ffc:	68c7      	ldr	r7, [r0, #12]
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002ffe:	fa03 f904 	lsl.w	r9, r3, r4
 8003002:	ea49 0505 	orr.w	r5, r9, r5
 8003006:	f828 501c 	strh.w	r5, [r8, ip, lsl #1]
 800300a:	fa04 f503 	lsl.w	r5, r4, r3
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800300e:	fa0a f605 	lsl.w	r6, sl, r5
 8003012:	9b02      	ldr	r3, [sp, #8]
 8003014:	43f6      	mvns	r6, r6
 8003016:	fa03 fb05 	lsl.w	fp, r3, r5
 800301a:	4037      	ands	r7, r6
 800301c:	ea47 070b 	orr.w	r7, r7, fp
 8003020:	60c7      	str	r7, [r0, #12]
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8003022:	6807      	ldr	r7, [r0, #0]
 8003024:	fa02 fb05 	lsl.w	fp, r2, r5
 8003028:	4037      	ands	r7, r6
 800302a:	ea47 070b 	orr.w	r7, r7, fp
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800302e:	f1be 0f01 	cmp.w	lr, #1
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8003032:	6007      	str	r7, [r0, #0]
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8003034:	d810      	bhi.n	8003058 <TM_GPIO_INT_Init+0x94>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8003036:	6847      	ldr	r7, [r0, #4]
 8003038:	9b01      	ldr	r3, [sp, #4]
 800303a:	ea27 0909 	bic.w	r9, r7, r9
 800303e:	fa03 f704 	lsl.w	r7, r3, r4
 8003042:	b2bf      	uxth	r7, r7
 8003044:	ea49 0707 	orr.w	r7, r9, r7
 8003048:	6047      	str	r7, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800304a:	6887      	ldr	r7, [r0, #8]
 800304c:	9b03      	ldr	r3, [sp, #12]
 800304e:	403e      	ands	r6, r7
 8003050:	fa03 f505 	lsl.w	r5, r3, r5
 8003054:	432e      	orrs	r6, r5
 8003056:	6086      	str	r6, [r0, #8]
 8003058:	3401      	adds	r4, #1
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800305a:	2c10      	cmp	r4, #16
 800305c:	d1c7      	bne.n	8002fee <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 800305e:	b005      	add	sp, #20
 8003060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003064:	20000130 	.word	0x20000130

08003068 <TM_GPIO_Init>:
void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8003068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800306c:	4605      	mov	r5, r0
 800306e:	4616      	mov	r6, r2
 8003070:	461f      	mov	r7, r3
 8003072:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8003076:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	if (GPIO_Pin == 0x00) {
 800307a:	460c      	mov	r4, r1
 800307c:	b169      	cbz	r1, 800309a <TM_GPIO_Init+0x32>
	TM_GPIO_INT_EnableClock(GPIOx);
 800307e:	f7ff ff95 	bl	8002fac <TM_GPIO_INT_EnableClock>
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8003082:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003086:	f8cd 8020 	str.w	r8, [sp, #32]
 800308a:	463b      	mov	r3, r7
 800308c:	4632      	mov	r2, r6
 800308e:	4621      	mov	r1, r4
 8003090:	4628      	mov	r0, r5
}
 8003092:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8003096:	f7ff bf95 	b.w	8002fc4 <TM_GPIO_INT_Init>
 800309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080030a0 <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80030a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 80030a2:	4c09      	ldr	r4, [pc, #36]	; (80030c8 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80030a4:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 80030a6:	6865      	ldr	r5, [r4, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80030a8:	f7fe f9d8 	bl	800145c <HAL_RCC_GetHCLKFreq>
 80030ac:	9b01      	ldr	r3, [sp, #4]
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <Delay+0x2c>)
 80030b0:	fbb0 f0f2 	udiv	r0, r0, r2
 80030b4:	4343      	muls	r3, r0
 80030b6:	9301      	str	r3, [sp, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 80030b8:	6863      	ldr	r3, [r4, #4]
 80030ba:	9a01      	ldr	r2, [sp, #4]
 80030bc:	1b5b      	subs	r3, r3, r5
 80030be:	4293      	cmp	r3, r2
 80030c0:	d3fa      	bcc.n	80030b8 <Delay+0x18>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 80030c2:	b003      	add	sp, #12
 80030c4:	bd30      	pop	{r4, r5, pc}
 80030c6:	bf00      	nop
 80030c8:	e0001000 	.word	0xe0001000
 80030cc:	000f4240 	.word	0x000f4240

080030d0 <TM_OneWire_Init>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_onewire.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80030d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030d2:	460e      	mov	r6, r1
 80030d4:	4615      	mov	r5, r2
 80030d6:	4604      	mov	r4, r0
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 80030d8:	f7ff fdd0 	bl	8002c7c <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 80030dc:	2201      	movs	r2, #1
 80030de:	9201      	str	r2, [sp, #4]
 80030e0:	9200      	str	r2, [sp, #0]
 80030e2:	2300      	movs	r3, #0
 80030e4:	4629      	mov	r1, r5
 80030e6:	4630      	mov	r0, r6
 80030e8:	f7ff ffbe 	bl	8003068 <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 80030ec:	6026      	str	r6, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80030ee:	80a5      	strh	r5, [r4, #4]
}
 80030f0:	b002      	add	sp, #8
 80030f2:	bd70      	pop	{r4, r5, r6, pc}

080030f4 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4604      	mov	r4, r0
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 80030f8:	6800      	ldr	r0, [r0, #0]
 80030fa:	88a1      	ldrh	r1, [r4, #4]
 80030fc:	040b      	lsls	r3, r1, #16
 80030fe:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003100:	f7ff ff3e 	bl	8002f80 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 8003104:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003108:	f7ff ffca 	bl	80030a0 <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 800310c:	88a1      	ldrh	r1, [r4, #4]
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	f7ff ff24 	bl	8002f5c <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 8003114:	2046      	movs	r0, #70	; 0x46
 8003116:	f7ff ffc3 	bl	80030a0 <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	88a2      	ldrh	r2, [r4, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	421a      	tst	r2, r3
 8003122:	bf14      	ite	ne
 8003124:	2401      	movne	r4, #1
 8003126:	2400      	moveq	r4, #0
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8003128:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800312c:	f7ff ffb8 	bl	80030a0 <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 8003130:	4620      	mov	r0, r4
 8003132:	bd10      	pop	{r4, pc}

08003134 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8003134:	b510      	push	{r4, lr}
 8003136:	4604      	mov	r4, r0
 8003138:	6800      	ldr	r0, [r0, #0]
 800313a:	88a3      	ldrh	r3, [r4, #4]
	if (bit) {
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 800313c:	041a      	lsls	r2, r3, #16
 800313e:	6182      	str	r2, [r0, #24]
	if (bit) {
 8003140:	b191      	cbz	r1, 8003168 <TM_OneWire_WriteBit+0x34>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003142:	4619      	mov	r1, r3
 8003144:	f7ff ff1c 	bl	8002f80 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 8003148:	200a      	movs	r0, #10
 800314a:	f7ff ffa9 	bl	80030a0 <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 800314e:	6820      	ldr	r0, [r4, #0]
 8003150:	88a1      	ldrh	r1, [r4, #4]
 8003152:	f7ff ff03 	bl	8002f5c <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8003156:	2037      	movs	r0, #55	; 0x37
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 8003158:	f7ff ffa2 	bl	80030a0 <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 800315c:	88a1      	ldrh	r1, [r4, #4]
 800315e:	6820      	ldr	r0, [r4, #0]
	}
}
 8003160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ONEWIRE_INPUT(OneWireStruct);
 8003164:	f7ff befa 	b.w	8002f5c <TM_GPIO_SetPinAsInput>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003168:	4619      	mov	r1, r3
 800316a:	f7ff ff09 	bl	8002f80 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 800316e:	2041      	movs	r0, #65	; 0x41
 8003170:	f7ff ff96 	bl	80030a0 <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	88a1      	ldrh	r1, [r4, #4]
 8003178:	f7ff fef0 	bl	8002f5c <TM_GPIO_SetPinAsInput>
		ONEWIRE_DELAY(5);
 800317c:	2005      	movs	r0, #5
 800317e:	e7eb      	b.n	8003158 <TM_OneWire_WriteBit+0x24>

08003180 <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8003180:	b510      	push	{r4, lr}
 8003182:	4604      	mov	r4, r0
	uint8_t bit = 0;
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003184:	6800      	ldr	r0, [r0, #0]
 8003186:	88a1      	ldrh	r1, [r4, #4]
 8003188:	040b      	lsls	r3, r1, #16
 800318a:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 800318c:	f7ff fef8 	bl	8002f80 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 8003190:	2003      	movs	r0, #3
 8003192:	f7ff ff85 	bl	80030a0 <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8003196:	88a1      	ldrh	r1, [r4, #4]
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	f7ff fedf 	bl	8002f5c <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 800319e:	200a      	movs	r0, #10
 80031a0:	f7ff ff7e 	bl	80030a0 <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	88a2      	ldrh	r2, [r4, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	421a      	tst	r2, r3
	uint8_t bit = 0;
 80031ac:	bf14      	ite	ne
 80031ae:	2401      	movne	r4, #1
 80031b0:	2400      	moveq	r4, #0
		/* Bit is HIGH */
		bit = 1;
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 80031b2:	2032      	movs	r0, #50	; 0x32
 80031b4:	f7ff ff74 	bl	80030a0 <Delay>
	
	/* Return bit value */
	return bit;
}
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd10      	pop	{r4, pc}

080031bc <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	4606      	mov	r6, r0
 80031c0:	460d      	mov	r5, r1
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 80031c2:	2409      	movs	r4, #9
 80031c4:	3c01      	subs	r4, #1
 80031c6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80031ca:	d100      	bne.n	80031ce <TM_OneWire_WriteByte+0x12>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
	}
}
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80031ce:	f005 0101 	and.w	r1, r5, #1
 80031d2:	4630      	mov	r0, r6
 80031d4:	f7ff ffae 	bl	8003134 <TM_OneWire_WriteBit>
		byte >>= 1;
 80031d8:	086d      	lsrs	r5, r5, #1
 80031da:	e7f3      	b.n	80031c4 <TM_OneWire_WriteByte+0x8>

080031dc <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4606      	mov	r6, r0
	uint8_t i = 8, byte = 0;
	while (i--) {
 80031e0:	2509      	movs	r5, #9
	uint8_t i = 8, byte = 0;
 80031e2:	2400      	movs	r4, #0
 80031e4:	3d01      	subs	r5, #1
	while (i--) {
 80031e6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80031ea:	d101      	bne.n	80031f0 <TM_OneWire_ReadByte+0x14>
		byte >>= 1;
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
	}
	
	return byte;
}
 80031ec:	4620      	mov	r0, r4
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80031f0:	4630      	mov	r0, r6
 80031f2:	f7ff ffc5 	bl	8003180 <TM_OneWire_ReadBit>
		byte >>= 1;
 80031f6:	0864      	lsrs	r4, r4, #1
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80031f8:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 80031fc:	b2e4      	uxtb	r4, r4
 80031fe:	e7f1      	b.n	80031e4 <TM_OneWire_ReadByte+0x8>

08003200 <TM_OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8003200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 8003204:	7a03      	ldrb	r3, [r0, #8]
uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8003206:	4604      	mov	r4, r0
 8003208:	460d      	mov	r5, r1
	if (!OneWireStruct->LastDeviceFlag) {
 800320a:	b91b      	cbnz	r3, 8003214 <TM_OneWire_Search+0x14>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 800320c:	f7ff ff72 	bl	80030f4 <TM_OneWire_Reset>
 8003210:	4681      	mov	r9, r0
 8003212:	b128      	cbz	r0, 8003220 <TM_OneWire_Search+0x20>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8003214:	2000      	movs	r0, #0
 8003216:	71a0      	strb	r0, [r4, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8003218:	7220      	strb	r0, [r4, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800321a:	71e0      	strb	r0, [r4, #7]
			return 0;
 800321c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		/* Issue the search command */
		TM_OneWire_WriteByte(OneWireStruct, command);  
 8003220:	4629      	mov	r1, r5
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff ffca 	bl	80031bc <TM_OneWire_WriteByte>
	rom_byte_mask = 1;
 8003228:	2601      	movs	r6, #1
	rom_byte_number = 0;
 800322a:	464f      	mov	r7, r9
	id_bit_number = 1;
 800322c:	4635      	mov	r5, r6

		/* Loop to do the search */
		do {
			/* Read a bit and its complement */
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff ffa6 	bl	8003180 <TM_OneWire_ReadBit>
 8003234:	4680      	mov	r8, r0
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff ffa2 	bl	8003180 <TM_OneWire_ReadBit>

			/* Check for no devices on 1-wire */
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 800323c:	f1b8 0f01 	cmp.w	r8, #1
 8003240:	d110      	bne.n	8003264 <TM_OneWire_Search+0x64>
 8003242:	2801      	cmp	r0, #1
 8003244:	d12e      	bne.n	80032a4 <TM_OneWire_Search+0xa4>
			}
		/* Loop until through all ROM bytes 0-7 */
		} while (rom_byte_number < 8);

		/* If the search was successful then */
		if (!(id_bit_number < 65)) {
 8003246:	2d40      	cmp	r5, #64	; 0x40
 8003248:	d9e4      	bls.n	8003214 <TM_OneWire_Search+0x14>
			/* Search successful so set LastDiscrepancy, LastDeviceFlag, search_result */
			OneWireStruct->LastDiscrepancy = last_zero;
 800324a:	f884 9006 	strb.w	r9, [r4, #6]

			/* Check for last device */
			if (OneWireStruct->LastDiscrepancy == 0) {
 800324e:	f1b9 0f00 	cmp.w	r9, #0
 8003252:	d101      	bne.n	8003258 <TM_OneWire_Search+0x58>
				OneWireStruct->LastDeviceFlag = 1;
 8003254:	2301      	movs	r3, #1
 8003256:	7223      	strb	r3, [r4, #8]
			search_result = 1;
		}
	}

	/* If no device found then reset counters so next 'search' will be like a first */
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8003258:	7a63      	ldrb	r3, [r4, #9]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0da      	beq.n	8003214 <TM_OneWire_Search+0x14>
 800325e:	2001      	movs	r0, #1
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8003260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (id_bit != cmp_id_bit) {
 8003264:	4580      	cmp	r8, r0
 8003266:	eb04 0307 	add.w	r3, r4, r7
 800326a:	d110      	bne.n	800328e <TM_OneWire_Search+0x8e>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 800326c:	79a2      	ldrb	r2, [r4, #6]
 800326e:	4295      	cmp	r5, r2
 8003270:	d212      	bcs.n	8003298 <TM_OneWire_Search+0x98>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8003272:	7a5a      	ldrb	r2, [r3, #9]
 8003274:	4216      	tst	r6, r2
 8003276:	bf14      	ite	ne
 8003278:	f04f 0801 	movne.w	r8, #1
 800327c:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) {
 8003280:	f1b8 0f00 	cmp.w	r8, #0
 8003284:	d10e      	bne.n	80032a4 <TM_OneWire_Search+0xa4>
						if (last_zero < 9) {
 8003286:	2d08      	cmp	r5, #8
 8003288:	d800      	bhi.n	800328c <TM_OneWire_Search+0x8c>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 800328a:	71e5      	strb	r5, [r4, #7]
 800328c:	46a9      	mov	r9, r5
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800328e:	7a5a      	ldrb	r2, [r3, #9]
 8003290:	ea22 0206 	bic.w	r2, r2, r6
 8003294:	725a      	strb	r2, [r3, #9]
 8003296:	e00b      	b.n	80032b0 <TM_OneWire_Search+0xb0>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003298:	bf0c      	ite	eq
 800329a:	f04f 0801 	moveq.w	r8, #1
 800329e:	f04f 0800 	movne.w	r8, #0
 80032a2:	e7ed      	b.n	8003280 <TM_OneWire_Search+0x80>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80032a4:	19e2      	adds	r2, r4, r7
 80032a6:	f04f 0801 	mov.w	r8, #1
 80032aa:	7a53      	ldrb	r3, [r2, #9]
 80032ac:	4333      	orrs	r3, r6
 80032ae:	7253      	strb	r3, [r2, #9]
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 80032b0:	4641      	mov	r1, r8
 80032b2:	4620      	mov	r0, r4
				rom_byte_mask <<= 1;
 80032b4:	0076      	lsls	r6, r6, #1
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 80032b6:	f7ff ff3d 	bl	8003134 <TM_OneWire_WriteBit>
				if (rom_byte_mask == 0) {
 80032ba:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++;
 80032be:	bf04      	itt	eq
 80032c0:	3701      	addeq	r7, #1
 80032c2:	b2ff      	uxtbeq	r7, r7
				id_bit_number++;
 80032c4:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1;
 80032c8:	bf08      	it	eq
 80032ca:	2601      	moveq	r6, #1
		} while (rom_byte_number < 8);
 80032cc:	2f07      	cmp	r7, #7
				id_bit_number++;
 80032ce:	b2ed      	uxtb	r5, r5
		} while (rom_byte_number < 8);
 80032d0:	d9ad      	bls.n	800322e <TM_OneWire_Search+0x2e>
 80032d2:	e7b8      	b.n	8003246 <TM_OneWire_Search+0x46>

080032d4 <TM_OneWire_First>:
	OneWireStruct->LastDiscrepancy = 0;
 80032d4:	2200      	movs	r2, #0
 80032d6:	7182      	strb	r2, [r0, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80032d8:	7202      	strb	r2, [r0, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80032da:	71c2      	strb	r2, [r0, #7]
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80032dc:	21f0      	movs	r1, #240	; 0xf0
 80032de:	f7ff bf8f 	b.w	8003200 <TM_OneWire_Search>

080032e2 <TM_OneWire_Next>:
   return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80032e2:	21f0      	movs	r1, #240	; 0xf0
 80032e4:	f7ff bf8c 	b.w	8003200 <TM_OneWire_Search>

080032e8 <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	460c      	mov	r4, r1
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80032ec:	2155      	movs	r1, #85	; 0x55
void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 80032ee:	4606      	mov	r6, r0
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80032f0:	f7ff ff64 	bl	80031bc <TM_OneWire_WriteByte>
 80032f4:	1e65      	subs	r5, r4, #1
 80032f6:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80032f8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff ff5d 	bl	80031bc <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003302:	42a5      	cmp	r5, r4
 8003304:	d1f8      	bne.n	80032f8 <TM_OneWire_SelectWithPointer+0x10>
	}	
}
 8003306:	bd70      	pop	{r4, r5, r6, pc}

08003308 <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003308:	f100 0309 	add.w	r3, r0, #9
 800330c:	3901      	subs	r1, #1
 800330e:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003314:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 8003318:	4283      	cmp	r3, r0
 800331a:	d1f9      	bne.n	8003310 <TM_OneWire_GetFullROM+0x8>
	}
}
 800331c:	4770      	bx	lr

0800331e <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800331e:	b530      	push	{r4, r5, lr}
 8003320:	4401      	add	r1, r0
	uint8_t crc = 0, inbyte, i, mix;
 8003322:	2300      	movs	r3, #0
	
	while (len--) {
 8003324:	4288      	cmp	r0, r1
 8003326:	d101      	bne.n	800332c <TM_OneWire_CRC8+0xe>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd30      	pop	{r4, r5, pc}
		inbyte = *addr++;
 800332c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003330:	2208      	movs	r2, #8
			mix = (crc ^ inbyte) & 0x01;
 8003332:	ea83 0504 	eor.w	r5, r3, r4
			if (mix) {
 8003336:	f015 0f01 	tst.w	r5, #1
 800333a:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 800333e:	bf18      	it	ne
 8003340:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 8003344:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003348:	bf18      	it	ne
 800334a:	b2db      	uxtbne	r3, r3
		for (i = 8; i; i--) {
 800334c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			inbyte >>= 1;
 8003350:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for (i = 8; i; i--) {
 8003354:	d1ed      	bne.n	8003332 <TM_OneWire_CRC8+0x14>
 8003356:	e7e5      	b.n	8003324 <TM_OneWire_CRC8+0x6>

08003358 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003358:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800335a:	480c      	ldr	r0, [pc, #48]	; (800338c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MX_USART1_UART_Init+0x38>)
 800335e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003362:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003366:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003368:	2300      	movs	r3, #0
 800336a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800336c:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800336e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003370:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003372:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003374:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003376:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003378:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800337a:	f7fe fe8d 	bl	8002098 <HAL_UART_Init>
 800337e:	b118      	cbz	r0, 8003388 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8003380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003384:	f7ff bb60 	b.w	8002a48 <Error_Handler>
 8003388:	bd08      	pop	{r3, pc}
 800338a:	bf00      	nop
 800338c:	20000334 	.word	0x20000334
 8003390:	40013800 	.word	0x40013800

08003394 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003394:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003396:	480c      	ldr	r0, [pc, #48]	; (80033c8 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_USART3_UART_Init+0x38>)
 800339a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800339e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033a2:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033a4:	2300      	movs	r3, #0
 80033a6:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033a8:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033aa:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033ac:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ae:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033b2:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033b4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033b6:	f7fe fe6f 	bl	8002098 <HAL_UART_Init>
 80033ba:	b118      	cbz	r0, 80033c4 <MX_USART3_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 80033bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80033c0:	f7ff bb42 	b.w	8002a48 <Error_Handler>
 80033c4:	bd08      	pop	{r3, pc}
 80033c6:	bf00      	nop
 80033c8:	200002bc 	.word	0x200002bc
 80033cc:	40004800 	.word	0x40004800

080033d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033d0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d2:	2214      	movs	r2, #20
{
 80033d4:	b08a      	sub	sp, #40	; 0x28
 80033d6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	2100      	movs	r1, #0
 80033da:	eb0d 0002 	add.w	r0, sp, r2
 80033de:	f000 f90b 	bl	80035f8 <memset>
  if(uartHandle->Instance==USART1)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	4a22      	ldr	r2, [pc, #136]	; (8003470 <HAL_UART_MspInit+0xa0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d120      	bne.n	800342c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ec:	4822      	ldr	r0, [pc, #136]	; (8003478 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f4:	661a      	str	r2, [r3, #96]	; 0x60
 80033f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80033fc:	9201      	str	r2, [sp, #4]
 80033fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003400:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003402:	f042 0202 	orr.w	r2, r2, #2
 8003406:	64da      	str	r2, [r3, #76]	; 0x4c
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003412:	23c0      	movs	r3, #192	; 0xc0
 8003414:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800341e:	2307      	movs	r3, #7
 8003420:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003424:	f7fd f9dc 	bl	80007e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003428:	b00a      	add	sp, #40	; 0x28
 800342a:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <HAL_UART_MspInit+0xac>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d1fa      	bne.n	8003428 <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003434:	4812      	ldr	r0, [pc, #72]	; (8003480 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003436:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003438:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800343c:	659a      	str	r2, [r3, #88]	; 0x58
 800343e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003440:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003444:	9203      	str	r2, [sp, #12]
 8003446:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800344a:	f042 0208 	orr.w	r2, r2, #8
 800344e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800345a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800345e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003468:	2307      	movs	r3, #7
 800346a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800346c:	a905      	add	r1, sp, #20
 800346e:	e7d9      	b.n	8003424 <HAL_UART_MspInit+0x54>
 8003470:	40013800 	.word	0x40013800
 8003474:	40021000 	.word	0x40021000
 8003478:	48000400 	.word	0x48000400
 800347c:	40004800 	.word	0x40004800
 8003480:	48000c00 	.word	0x48000c00

08003484 <MX_USB_OTG_FS_PCD_Init>:
/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003484:	480c      	ldr	r0, [pc, #48]	; (80034b8 <MX_USB_OTG_FS_PCD_Init+0x34>)
{
 8003486:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003488:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800348c:	2306      	movs	r3, #6
 800348e:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003492:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003494:	2202      	movs	r2, #2
 8003496:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003498:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800349a:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800349c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800349e:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80034a0:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80034a2:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80034a4:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80034a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80034a8:	f7fd fb24 	bl	8000af4 <HAL_PCD_Init>
 80034ac:	b118      	cbz	r0, 80034b6 <MX_USB_OTG_FS_PCD_Init+0x32>
  {
    Error_Handler();
  }

}
 80034ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80034b2:	f7ff bac9 	b.w	8002a48 <Error_Handler>
 80034b6:	bd08      	pop	{r3, pc}
 80034b8:	200003ac 	.word	0x200003ac

080034bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
 80034c0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c2:	2214      	movs	r2, #20
 80034c4:	2100      	movs	r1, #0
 80034c6:	a803      	add	r0, sp, #12
 80034c8:	f000 f896 	bl	80035f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d2:	d13c      	bne.n	800354e <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d4:	4c20      	ldr	r4, [pc, #128]	; (8003558 <HAL_PCD_MspInit+0x9c>)
 80034d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80034de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80034ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80034f2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034f4:	f7fd f974 	bl	80007e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80034f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003506:	2303      	movs	r3, #3
 8003508:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800350c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003512:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003514:	f7fd f964 	bl	80007e0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003518:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800351a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800351e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003520:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	d410      	bmi.n	8003552 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003530:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003536:	65a3      	str	r3, [r4, #88]	; 0x58
 8003538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8003542:	f7fd fbb7 	bl	8000cb4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354c:	65a3      	str	r3, [r4, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800354e:	b008      	add	sp, #32
 8003550:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8003552:	f7fd fbaf 	bl	8000cb4 <HAL_PWREx_EnableVddUSB>
}
 8003556:	e7fa      	b.n	800354e <HAL_PCD_MspInit+0x92>
 8003558:	40021000 	.word	0x40021000

0800355c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800355c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003594 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003562:	e003      	b.n	800356c <LoopCopyDataInit>

08003564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800356a:	3104      	adds	r1, #4

0800356c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800356c:	480b      	ldr	r0, [pc, #44]	; (800359c <LoopForever+0xa>)
	ldr	r3, =_edata
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003574:	d3f6      	bcc.n	8003564 <CopyDataInit>
	ldr	r2, =_sbss
 8003576:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003578:	e002      	b.n	8003580 <LoopFillZerobss>

0800357a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800357a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800357c:	f842 3b04 	str.w	r3, [r2], #4

08003580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <LoopForever+0x16>)
	cmp	r2, r3
 8003582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003584:	d3f9      	bcc.n	800357a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003586:	f7ff fb55 	bl	8002c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800358a:	f000 f811 	bl	80035b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800358e:	f7ff f955 	bl	800283c <main>

08003592 <LoopForever>:

LoopForever:
    b LoopForever
 8003592:	e7fe      	b.n	8003592 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003594:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003598:	08003fa4 	.word	0x08003fa4
	ldr	r0, =_sdata
 800359c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035a0:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80035a4:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80035a8:	200007b8 	.word	0x200007b8

080035ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035ac:	e7fe      	b.n	80035ac <ADC1_2_IRQHandler>
	...

080035b0 <__libc_init_array>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4e0d      	ldr	r6, [pc, #52]	; (80035e8 <__libc_init_array+0x38>)
 80035b4:	4c0d      	ldr	r4, [pc, #52]	; (80035ec <__libc_init_array+0x3c>)
 80035b6:	1ba4      	subs	r4, r4, r6
 80035b8:	10a4      	asrs	r4, r4, #2
 80035ba:	2500      	movs	r5, #0
 80035bc:	42a5      	cmp	r5, r4
 80035be:	d109      	bne.n	80035d4 <__libc_init_array+0x24>
 80035c0:	4e0b      	ldr	r6, [pc, #44]	; (80035f0 <__libc_init_array+0x40>)
 80035c2:	4c0c      	ldr	r4, [pc, #48]	; (80035f4 <__libc_init_array+0x44>)
 80035c4:	f000 fc62 	bl	8003e8c <_init>
 80035c8:	1ba4      	subs	r4, r4, r6
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	2500      	movs	r5, #0
 80035ce:	42a5      	cmp	r5, r4
 80035d0:	d105      	bne.n	80035de <__libc_init_array+0x2e>
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035d8:	4798      	blx	r3
 80035da:	3501      	adds	r5, #1
 80035dc:	e7ee      	b.n	80035bc <__libc_init_array+0xc>
 80035de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035e2:	4798      	blx	r3
 80035e4:	3501      	adds	r5, #1
 80035e6:	e7f2      	b.n	80035ce <__libc_init_array+0x1e>
 80035e8:	08003f9c 	.word	0x08003f9c
 80035ec:	08003f9c 	.word	0x08003f9c
 80035f0:	08003f9c 	.word	0x08003f9c
 80035f4:	08003fa0 	.word	0x08003fa0

080035f8 <memset>:
 80035f8:	4402      	add	r2, r0
 80035fa:	4603      	mov	r3, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d100      	bne.n	8003602 <memset+0xa>
 8003600:	4770      	bx	lr
 8003602:	f803 1b01 	strb.w	r1, [r3], #1
 8003606:	e7f9      	b.n	80035fc <memset+0x4>

08003608 <_free_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4605      	mov	r5, r0
 800360c:	2900      	cmp	r1, #0
 800360e:	d045      	beq.n	800369c <_free_r+0x94>
 8003610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003614:	1f0c      	subs	r4, r1, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfb8      	it	lt
 800361a:	18e4      	addlt	r4, r4, r3
 800361c:	f000 f8ec 	bl	80037f8 <__malloc_lock>
 8003620:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <_free_r+0x98>)
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	4610      	mov	r0, r2
 8003626:	b933      	cbnz	r3, 8003636 <_free_r+0x2e>
 8003628:	6063      	str	r3, [r4, #4]
 800362a:	6014      	str	r4, [r2, #0]
 800362c:	4628      	mov	r0, r5
 800362e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003632:	f000 b8e2 	b.w	80037fa <__malloc_unlock>
 8003636:	42a3      	cmp	r3, r4
 8003638:	d90c      	bls.n	8003654 <_free_r+0x4c>
 800363a:	6821      	ldr	r1, [r4, #0]
 800363c:	1862      	adds	r2, r4, r1
 800363e:	4293      	cmp	r3, r2
 8003640:	bf04      	itt	eq
 8003642:	681a      	ldreq	r2, [r3, #0]
 8003644:	685b      	ldreq	r3, [r3, #4]
 8003646:	6063      	str	r3, [r4, #4]
 8003648:	bf04      	itt	eq
 800364a:	1852      	addeq	r2, r2, r1
 800364c:	6022      	streq	r2, [r4, #0]
 800364e:	6004      	str	r4, [r0, #0]
 8003650:	e7ec      	b.n	800362c <_free_r+0x24>
 8003652:	4613      	mov	r3, r2
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	b10a      	cbz	r2, 800365c <_free_r+0x54>
 8003658:	42a2      	cmp	r2, r4
 800365a:	d9fa      	bls.n	8003652 <_free_r+0x4a>
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	1858      	adds	r0, r3, r1
 8003660:	42a0      	cmp	r0, r4
 8003662:	d10b      	bne.n	800367c <_free_r+0x74>
 8003664:	6820      	ldr	r0, [r4, #0]
 8003666:	4401      	add	r1, r0
 8003668:	1858      	adds	r0, r3, r1
 800366a:	4282      	cmp	r2, r0
 800366c:	6019      	str	r1, [r3, #0]
 800366e:	d1dd      	bne.n	800362c <_free_r+0x24>
 8003670:	6810      	ldr	r0, [r2, #0]
 8003672:	6852      	ldr	r2, [r2, #4]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	4401      	add	r1, r0
 8003678:	6019      	str	r1, [r3, #0]
 800367a:	e7d7      	b.n	800362c <_free_r+0x24>
 800367c:	d902      	bls.n	8003684 <_free_r+0x7c>
 800367e:	230c      	movs	r3, #12
 8003680:	602b      	str	r3, [r5, #0]
 8003682:	e7d3      	b.n	800362c <_free_r+0x24>
 8003684:	6820      	ldr	r0, [r4, #0]
 8003686:	1821      	adds	r1, r4, r0
 8003688:	428a      	cmp	r2, r1
 800368a:	bf04      	itt	eq
 800368c:	6811      	ldreq	r1, [r2, #0]
 800368e:	6852      	ldreq	r2, [r2, #4]
 8003690:	6062      	str	r2, [r4, #4]
 8003692:	bf04      	itt	eq
 8003694:	1809      	addeq	r1, r1, r0
 8003696:	6021      	streq	r1, [r4, #0]
 8003698:	605c      	str	r4, [r3, #4]
 800369a:	e7c7      	b.n	800362c <_free_r+0x24>
 800369c:	bd38      	pop	{r3, r4, r5, pc}
 800369e:	bf00      	nop
 80036a0:	2000014c 	.word	0x2000014c

080036a4 <_malloc_r>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	1ccd      	adds	r5, r1, #3
 80036a8:	f025 0503 	bic.w	r5, r5, #3
 80036ac:	3508      	adds	r5, #8
 80036ae:	2d0c      	cmp	r5, #12
 80036b0:	bf38      	it	cc
 80036b2:	250c      	movcc	r5, #12
 80036b4:	2d00      	cmp	r5, #0
 80036b6:	4606      	mov	r6, r0
 80036b8:	db01      	blt.n	80036be <_malloc_r+0x1a>
 80036ba:	42a9      	cmp	r1, r5
 80036bc:	d903      	bls.n	80036c6 <_malloc_r+0x22>
 80036be:	230c      	movs	r3, #12
 80036c0:	6033      	str	r3, [r6, #0]
 80036c2:	2000      	movs	r0, #0
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
 80036c6:	f000 f897 	bl	80037f8 <__malloc_lock>
 80036ca:	4a23      	ldr	r2, [pc, #140]	; (8003758 <_malloc_r+0xb4>)
 80036cc:	6814      	ldr	r4, [r2, #0]
 80036ce:	4621      	mov	r1, r4
 80036d0:	b991      	cbnz	r1, 80036f8 <_malloc_r+0x54>
 80036d2:	4c22      	ldr	r4, [pc, #136]	; (800375c <_malloc_r+0xb8>)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	b91b      	cbnz	r3, 80036e0 <_malloc_r+0x3c>
 80036d8:	4630      	mov	r0, r6
 80036da:	f000 f841 	bl	8003760 <_sbrk_r>
 80036de:	6020      	str	r0, [r4, #0]
 80036e0:	4629      	mov	r1, r5
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 f83c 	bl	8003760 <_sbrk_r>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d126      	bne.n	800373a <_malloc_r+0x96>
 80036ec:	230c      	movs	r3, #12
 80036ee:	6033      	str	r3, [r6, #0]
 80036f0:	4630      	mov	r0, r6
 80036f2:	f000 f882 	bl	80037fa <__malloc_unlock>
 80036f6:	e7e4      	b.n	80036c2 <_malloc_r+0x1e>
 80036f8:	680b      	ldr	r3, [r1, #0]
 80036fa:	1b5b      	subs	r3, r3, r5
 80036fc:	d41a      	bmi.n	8003734 <_malloc_r+0x90>
 80036fe:	2b0b      	cmp	r3, #11
 8003700:	d90f      	bls.n	8003722 <_malloc_r+0x7e>
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	50cd      	str	r5, [r1, r3]
 8003706:	18cc      	adds	r4, r1, r3
 8003708:	4630      	mov	r0, r6
 800370a:	f000 f876 	bl	80037fa <__malloc_unlock>
 800370e:	f104 000b 	add.w	r0, r4, #11
 8003712:	1d23      	adds	r3, r4, #4
 8003714:	f020 0007 	bic.w	r0, r0, #7
 8003718:	1ac3      	subs	r3, r0, r3
 800371a:	d01b      	beq.n	8003754 <_malloc_r+0xb0>
 800371c:	425a      	negs	r2, r3
 800371e:	50e2      	str	r2, [r4, r3]
 8003720:	bd70      	pop	{r4, r5, r6, pc}
 8003722:	428c      	cmp	r4, r1
 8003724:	bf0d      	iteet	eq
 8003726:	6863      	ldreq	r3, [r4, #4]
 8003728:	684b      	ldrne	r3, [r1, #4]
 800372a:	6063      	strne	r3, [r4, #4]
 800372c:	6013      	streq	r3, [r2, #0]
 800372e:	bf18      	it	ne
 8003730:	460c      	movne	r4, r1
 8003732:	e7e9      	b.n	8003708 <_malloc_r+0x64>
 8003734:	460c      	mov	r4, r1
 8003736:	6849      	ldr	r1, [r1, #4]
 8003738:	e7ca      	b.n	80036d0 <_malloc_r+0x2c>
 800373a:	1cc4      	adds	r4, r0, #3
 800373c:	f024 0403 	bic.w	r4, r4, #3
 8003740:	42a0      	cmp	r0, r4
 8003742:	d005      	beq.n	8003750 <_malloc_r+0xac>
 8003744:	1a21      	subs	r1, r4, r0
 8003746:	4630      	mov	r0, r6
 8003748:	f000 f80a 	bl	8003760 <_sbrk_r>
 800374c:	3001      	adds	r0, #1
 800374e:	d0cd      	beq.n	80036ec <_malloc_r+0x48>
 8003750:	6025      	str	r5, [r4, #0]
 8003752:	e7d9      	b.n	8003708 <_malloc_r+0x64>
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	bf00      	nop
 8003758:	2000014c 	.word	0x2000014c
 800375c:	20000150 	.word	0x20000150

08003760 <_sbrk_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4c06      	ldr	r4, [pc, #24]	; (800377c <_sbrk_r+0x1c>)
 8003764:	2300      	movs	r3, #0
 8003766:	4605      	mov	r5, r0
 8003768:	4608      	mov	r0, r1
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	f000 fb80 	bl	8003e70 <_sbrk>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_sbrk_r+0x1a>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	b103      	cbz	r3, 800377a <_sbrk_r+0x1a>
 8003778:	602b      	str	r3, [r5, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	200007b4 	.word	0x200007b4

08003780 <sniprintf>:
 8003780:	b40c      	push	{r2, r3}
 8003782:	b530      	push	{r4, r5, lr}
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <sniprintf+0x64>)
 8003786:	1e0c      	subs	r4, r1, #0
 8003788:	b09d      	sub	sp, #116	; 0x74
 800378a:	681d      	ldr	r5, [r3, #0]
 800378c:	da08      	bge.n	80037a0 <sniprintf+0x20>
 800378e:	238b      	movs	r3, #139	; 0x8b
 8003790:	602b      	str	r3, [r5, #0]
 8003792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003796:	b01d      	add	sp, #116	; 0x74
 8003798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800379c:	b002      	add	sp, #8
 800379e:	4770      	bx	lr
 80037a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80037a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037a8:	bf14      	ite	ne
 80037aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80037ae:	4623      	moveq	r3, r4
 80037b0:	9304      	str	r3, [sp, #16]
 80037b2:	9307      	str	r3, [sp, #28]
 80037b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037b8:	9002      	str	r0, [sp, #8]
 80037ba:	9006      	str	r0, [sp, #24]
 80037bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037c2:	ab21      	add	r3, sp, #132	; 0x84
 80037c4:	a902      	add	r1, sp, #8
 80037c6:	4628      	mov	r0, r5
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	f000 f873 	bl	80038b4 <_svfiprintf_r>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	bfbc      	itt	lt
 80037d2:	238b      	movlt	r3, #139	; 0x8b
 80037d4:	602b      	strlt	r3, [r5, #0]
 80037d6:	2c00      	cmp	r4, #0
 80037d8:	d0dd      	beq.n	8003796 <sniprintf+0x16>
 80037da:	9b02      	ldr	r3, [sp, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e7d9      	b.n	8003796 <sniprintf+0x16>
 80037e2:	bf00      	nop
 80037e4:	20000004 	.word	0x20000004

080037e8 <strcpy>:
 80037e8:	4603      	mov	r3, r0
 80037ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ee:	f803 2b01 	strb.w	r2, [r3], #1
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	d1f9      	bne.n	80037ea <strcpy+0x2>
 80037f6:	4770      	bx	lr

080037f8 <__malloc_lock>:
 80037f8:	4770      	bx	lr

080037fa <__malloc_unlock>:
 80037fa:	4770      	bx	lr

080037fc <__ssputs_r>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	688e      	ldr	r6, [r1, #8]
 8003802:	429e      	cmp	r6, r3
 8003804:	4682      	mov	sl, r0
 8003806:	460c      	mov	r4, r1
 8003808:	4691      	mov	r9, r2
 800380a:	4698      	mov	r8, r3
 800380c:	d835      	bhi.n	800387a <__ssputs_r+0x7e>
 800380e:	898a      	ldrh	r2, [r1, #12]
 8003810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003814:	d031      	beq.n	800387a <__ssputs_r+0x7e>
 8003816:	6825      	ldr	r5, [r4, #0]
 8003818:	6909      	ldr	r1, [r1, #16]
 800381a:	1a6f      	subs	r7, r5, r1
 800381c:	6965      	ldr	r5, [r4, #20]
 800381e:	2302      	movs	r3, #2
 8003820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003824:	fb95 f5f3 	sdiv	r5, r5, r3
 8003828:	f108 0301 	add.w	r3, r8, #1
 800382c:	443b      	add	r3, r7
 800382e:	429d      	cmp	r5, r3
 8003830:	bf38      	it	cc
 8003832:	461d      	movcc	r5, r3
 8003834:	0553      	lsls	r3, r2, #21
 8003836:	d531      	bpl.n	800389c <__ssputs_r+0xa0>
 8003838:	4629      	mov	r1, r5
 800383a:	f7ff ff33 	bl	80036a4 <_malloc_r>
 800383e:	4606      	mov	r6, r0
 8003840:	b950      	cbnz	r0, 8003858 <__ssputs_r+0x5c>
 8003842:	230c      	movs	r3, #12
 8003844:	f8ca 3000 	str.w	r3, [sl]
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003858:	463a      	mov	r2, r7
 800385a:	6921      	ldr	r1, [r4, #16]
 800385c:	f000 fab4 	bl	8003dc8 <memcpy>
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	6126      	str	r6, [r4, #16]
 800386e:	6165      	str	r5, [r4, #20]
 8003870:	443e      	add	r6, r7
 8003872:	1bed      	subs	r5, r5, r7
 8003874:	6026      	str	r6, [r4, #0]
 8003876:	60a5      	str	r5, [r4, #8]
 8003878:	4646      	mov	r6, r8
 800387a:	4546      	cmp	r6, r8
 800387c:	bf28      	it	cs
 800387e:	4646      	movcs	r6, r8
 8003880:	4632      	mov	r2, r6
 8003882:	4649      	mov	r1, r9
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	f000 faaa 	bl	8003dde <memmove>
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	1b9b      	subs	r3, r3, r6
 800388e:	60a3      	str	r3, [r4, #8]
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	441e      	add	r6, r3
 8003894:	6026      	str	r6, [r4, #0]
 8003896:	2000      	movs	r0, #0
 8003898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389c:	462a      	mov	r2, r5
 800389e:	f000 fab8 	bl	8003e12 <_realloc_r>
 80038a2:	4606      	mov	r6, r0
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d1e1      	bne.n	800386c <__ssputs_r+0x70>
 80038a8:	6921      	ldr	r1, [r4, #16]
 80038aa:	4650      	mov	r0, sl
 80038ac:	f7ff feac 	bl	8003608 <_free_r>
 80038b0:	e7c7      	b.n	8003842 <__ssputs_r+0x46>
	...

080038b4 <_svfiprintf_r>:
 80038b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b8:	b09d      	sub	sp, #116	; 0x74
 80038ba:	4680      	mov	r8, r0
 80038bc:	9303      	str	r3, [sp, #12]
 80038be:	898b      	ldrh	r3, [r1, #12]
 80038c0:	061c      	lsls	r4, r3, #24
 80038c2:	460d      	mov	r5, r1
 80038c4:	4616      	mov	r6, r2
 80038c6:	d50f      	bpl.n	80038e8 <_svfiprintf_r+0x34>
 80038c8:	690b      	ldr	r3, [r1, #16]
 80038ca:	b96b      	cbnz	r3, 80038e8 <_svfiprintf_r+0x34>
 80038cc:	2140      	movs	r1, #64	; 0x40
 80038ce:	f7ff fee9 	bl	80036a4 <_malloc_r>
 80038d2:	6028      	str	r0, [r5, #0]
 80038d4:	6128      	str	r0, [r5, #16]
 80038d6:	b928      	cbnz	r0, 80038e4 <_svfiprintf_r+0x30>
 80038d8:	230c      	movs	r3, #12
 80038da:	f8c8 3000 	str.w	r3, [r8]
 80038de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e2:	e0c5      	b.n	8003a70 <_svfiprintf_r+0x1bc>
 80038e4:	2340      	movs	r3, #64	; 0x40
 80038e6:	616b      	str	r3, [r5, #20]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9309      	str	r3, [sp, #36]	; 0x24
 80038ec:	2320      	movs	r3, #32
 80038ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f2:	2330      	movs	r3, #48	; 0x30
 80038f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f8:	f04f 0b01 	mov.w	fp, #1
 80038fc:	4637      	mov	r7, r6
 80038fe:	463c      	mov	r4, r7
 8003900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d13c      	bne.n	8003982 <_svfiprintf_r+0xce>
 8003908:	ebb7 0a06 	subs.w	sl, r7, r6
 800390c:	d00b      	beq.n	8003926 <_svfiprintf_r+0x72>
 800390e:	4653      	mov	r3, sl
 8003910:	4632      	mov	r2, r6
 8003912:	4629      	mov	r1, r5
 8003914:	4640      	mov	r0, r8
 8003916:	f7ff ff71 	bl	80037fc <__ssputs_r>
 800391a:	3001      	adds	r0, #1
 800391c:	f000 80a3 	beq.w	8003a66 <_svfiprintf_r+0x1b2>
 8003920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003922:	4453      	add	r3, sl
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
 8003926:	783b      	ldrb	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 809c 	beq.w	8003a66 <_svfiprintf_r+0x1b2>
 800392e:	2300      	movs	r3, #0
 8003930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	9307      	str	r3, [sp, #28]
 8003938:	9205      	str	r2, [sp, #20]
 800393a:	9306      	str	r3, [sp, #24]
 800393c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003940:	931a      	str	r3, [sp, #104]	; 0x68
 8003942:	2205      	movs	r2, #5
 8003944:	7821      	ldrb	r1, [r4, #0]
 8003946:	4850      	ldr	r0, [pc, #320]	; (8003a88 <_svfiprintf_r+0x1d4>)
 8003948:	f7fc fc42 	bl	80001d0 <memchr>
 800394c:	1c67      	adds	r7, r4, #1
 800394e:	9b04      	ldr	r3, [sp, #16]
 8003950:	b9d8      	cbnz	r0, 800398a <_svfiprintf_r+0xd6>
 8003952:	06d9      	lsls	r1, r3, #27
 8003954:	bf44      	itt	mi
 8003956:	2220      	movmi	r2, #32
 8003958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800395c:	071a      	lsls	r2, r3, #28
 800395e:	bf44      	itt	mi
 8003960:	222b      	movmi	r2, #43	; 0x2b
 8003962:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003966:	7822      	ldrb	r2, [r4, #0]
 8003968:	2a2a      	cmp	r2, #42	; 0x2a
 800396a:	d016      	beq.n	800399a <_svfiprintf_r+0xe6>
 800396c:	9a07      	ldr	r2, [sp, #28]
 800396e:	2100      	movs	r1, #0
 8003970:	200a      	movs	r0, #10
 8003972:	4627      	mov	r7, r4
 8003974:	3401      	adds	r4, #1
 8003976:	783b      	ldrb	r3, [r7, #0]
 8003978:	3b30      	subs	r3, #48	; 0x30
 800397a:	2b09      	cmp	r3, #9
 800397c:	d951      	bls.n	8003a22 <_svfiprintf_r+0x16e>
 800397e:	b1c9      	cbz	r1, 80039b4 <_svfiprintf_r+0x100>
 8003980:	e011      	b.n	80039a6 <_svfiprintf_r+0xf2>
 8003982:	2b25      	cmp	r3, #37	; 0x25
 8003984:	d0c0      	beq.n	8003908 <_svfiprintf_r+0x54>
 8003986:	4627      	mov	r7, r4
 8003988:	e7b9      	b.n	80038fe <_svfiprintf_r+0x4a>
 800398a:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <_svfiprintf_r+0x1d4>)
 800398c:	1a80      	subs	r0, r0, r2
 800398e:	fa0b f000 	lsl.w	r0, fp, r0
 8003992:	4318      	orrs	r0, r3
 8003994:	9004      	str	r0, [sp, #16]
 8003996:	463c      	mov	r4, r7
 8003998:	e7d3      	b.n	8003942 <_svfiprintf_r+0x8e>
 800399a:	9a03      	ldr	r2, [sp, #12]
 800399c:	1d11      	adds	r1, r2, #4
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	9103      	str	r1, [sp, #12]
 80039a2:	2a00      	cmp	r2, #0
 80039a4:	db01      	blt.n	80039aa <_svfiprintf_r+0xf6>
 80039a6:	9207      	str	r2, [sp, #28]
 80039a8:	e004      	b.n	80039b4 <_svfiprintf_r+0x100>
 80039aa:	4252      	negs	r2, r2
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	9207      	str	r2, [sp, #28]
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	783b      	ldrb	r3, [r7, #0]
 80039b6:	2b2e      	cmp	r3, #46	; 0x2e
 80039b8:	d10e      	bne.n	80039d8 <_svfiprintf_r+0x124>
 80039ba:	787b      	ldrb	r3, [r7, #1]
 80039bc:	2b2a      	cmp	r3, #42	; 0x2a
 80039be:	f107 0101 	add.w	r1, r7, #1
 80039c2:	d132      	bne.n	8003a2a <_svfiprintf_r+0x176>
 80039c4:	9b03      	ldr	r3, [sp, #12]
 80039c6:	1d1a      	adds	r2, r3, #4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	9203      	str	r2, [sp, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bfb8      	it	lt
 80039d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039d4:	3702      	adds	r7, #2
 80039d6:	9305      	str	r3, [sp, #20]
 80039d8:	4c2c      	ldr	r4, [pc, #176]	; (8003a8c <_svfiprintf_r+0x1d8>)
 80039da:	7839      	ldrb	r1, [r7, #0]
 80039dc:	2203      	movs	r2, #3
 80039de:	4620      	mov	r0, r4
 80039e0:	f7fc fbf6 	bl	80001d0 <memchr>
 80039e4:	b138      	cbz	r0, 80039f6 <_svfiprintf_r+0x142>
 80039e6:	2340      	movs	r3, #64	; 0x40
 80039e8:	1b00      	subs	r0, r0, r4
 80039ea:	fa03 f000 	lsl.w	r0, r3, r0
 80039ee:	9b04      	ldr	r3, [sp, #16]
 80039f0:	4303      	orrs	r3, r0
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	3701      	adds	r7, #1
 80039f6:	7839      	ldrb	r1, [r7, #0]
 80039f8:	4825      	ldr	r0, [pc, #148]	; (8003a90 <_svfiprintf_r+0x1dc>)
 80039fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039fe:	2206      	movs	r2, #6
 8003a00:	1c7e      	adds	r6, r7, #1
 8003a02:	f7fc fbe5 	bl	80001d0 <memchr>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d035      	beq.n	8003a76 <_svfiprintf_r+0x1c2>
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <_svfiprintf_r+0x1e0>)
 8003a0c:	b9fb      	cbnz	r3, 8003a4e <_svfiprintf_r+0x19a>
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	3307      	adds	r3, #7
 8003a12:	f023 0307 	bic.w	r3, r3, #7
 8003a16:	3308      	adds	r3, #8
 8003a18:	9303      	str	r3, [sp, #12]
 8003a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1c:	444b      	add	r3, r9
 8003a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a20:	e76c      	b.n	80038fc <_svfiprintf_r+0x48>
 8003a22:	fb00 3202 	mla	r2, r0, r2, r3
 8003a26:	2101      	movs	r1, #1
 8003a28:	e7a3      	b.n	8003972 <_svfiprintf_r+0xbe>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9305      	str	r3, [sp, #20]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	240a      	movs	r4, #10
 8003a32:	460f      	mov	r7, r1
 8003a34:	3101      	adds	r1, #1
 8003a36:	783a      	ldrb	r2, [r7, #0]
 8003a38:	3a30      	subs	r2, #48	; 0x30
 8003a3a:	2a09      	cmp	r2, #9
 8003a3c:	d903      	bls.n	8003a46 <_svfiprintf_r+0x192>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ca      	beq.n	80039d8 <_svfiprintf_r+0x124>
 8003a42:	9005      	str	r0, [sp, #20]
 8003a44:	e7c8      	b.n	80039d8 <_svfiprintf_r+0x124>
 8003a46:	fb04 2000 	mla	r0, r4, r0, r2
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e7f1      	b.n	8003a32 <_svfiprintf_r+0x17e>
 8003a4e:	ab03      	add	r3, sp, #12
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	462a      	mov	r2, r5
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_svfiprintf_r+0x1e4>)
 8003a56:	a904      	add	r1, sp, #16
 8003a58:	4640      	mov	r0, r8
 8003a5a:	f3af 8000 	nop.w
 8003a5e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003a62:	4681      	mov	r9, r0
 8003a64:	d1d9      	bne.n	8003a1a <_svfiprintf_r+0x166>
 8003a66:	89ab      	ldrh	r3, [r5, #12]
 8003a68:	065b      	lsls	r3, r3, #25
 8003a6a:	f53f af38 	bmi.w	80038de <_svfiprintf_r+0x2a>
 8003a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a70:	b01d      	add	sp, #116	; 0x74
 8003a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a76:	ab03      	add	r3, sp, #12
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	462a      	mov	r2, r5
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <_svfiprintf_r+0x1e4>)
 8003a7e:	a904      	add	r1, sp, #16
 8003a80:	4640      	mov	r0, r8
 8003a82:	f000 f881 	bl	8003b88 <_printf_i>
 8003a86:	e7ea      	b.n	8003a5e <_svfiprintf_r+0x1aa>
 8003a88:	08003f60 	.word	0x08003f60
 8003a8c:	08003f66 	.word	0x08003f66
 8003a90:	08003f6a 	.word	0x08003f6a
 8003a94:	00000000 	.word	0x00000000
 8003a98:	080037fd 	.word	0x080037fd

08003a9c <_printf_common>:
 8003a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa0:	4691      	mov	r9, r2
 8003aa2:	461f      	mov	r7, r3
 8003aa4:	688a      	ldr	r2, [r1, #8]
 8003aa6:	690b      	ldr	r3, [r1, #16]
 8003aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bfb8      	it	lt
 8003ab0:	4613      	movlt	r3, r2
 8003ab2:	f8c9 3000 	str.w	r3, [r9]
 8003ab6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aba:	4606      	mov	r6, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	b112      	cbz	r2, 8003ac6 <_printf_common+0x2a>
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f8c9 3000 	str.w	r3, [r9]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0699      	lsls	r1, r3, #26
 8003aca:	bf42      	ittt	mi
 8003acc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ad0:	3302      	addmi	r3, #2
 8003ad2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	f015 0506 	ands.w	r5, r5, #6
 8003adc:	d107      	bne.n	8003aee <_printf_common+0x52>
 8003ade:	f104 0a19 	add.w	sl, r4, #25
 8003ae2:	68e3      	ldr	r3, [r4, #12]
 8003ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	429d      	cmp	r5, r3
 8003aec:	db29      	blt.n	8003b42 <_printf_common+0xa6>
 8003aee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	3300      	adds	r3, #0
 8003af6:	bf18      	it	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	0692      	lsls	r2, r2, #26
 8003afc:	d42e      	bmi.n	8003b5c <_printf_common+0xc0>
 8003afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b02:	4639      	mov	r1, r7
 8003b04:	4630      	mov	r0, r6
 8003b06:	47c0      	blx	r8
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d021      	beq.n	8003b50 <_printf_common+0xb4>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	68e5      	ldr	r5, [r4, #12]
 8003b10:	f8d9 2000 	ldr.w	r2, [r9]
 8003b14:	f003 0306 	and.w	r3, r3, #6
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	bf08      	it	eq
 8003b1c:	1aad      	subeq	r5, r5, r2
 8003b1e:	68a3      	ldr	r3, [r4, #8]
 8003b20:	6922      	ldr	r2, [r4, #16]
 8003b22:	bf0c      	ite	eq
 8003b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b28:	2500      	movne	r5, #0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfc4      	itt	gt
 8003b2e:	1a9b      	subgt	r3, r3, r2
 8003b30:	18ed      	addgt	r5, r5, r3
 8003b32:	f04f 0900 	mov.w	r9, #0
 8003b36:	341a      	adds	r4, #26
 8003b38:	454d      	cmp	r5, r9
 8003b3a:	d11b      	bne.n	8003b74 <_printf_common+0xd8>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b42:	2301      	movs	r3, #1
 8003b44:	4652      	mov	r2, sl
 8003b46:	4639      	mov	r1, r7
 8003b48:	4630      	mov	r0, r6
 8003b4a:	47c0      	blx	r8
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d103      	bne.n	8003b58 <_printf_common+0xbc>
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b58:	3501      	adds	r5, #1
 8003b5a:	e7c2      	b.n	8003ae2 <_printf_common+0x46>
 8003b5c:	18e1      	adds	r1, r4, r3
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	2030      	movs	r0, #48	; 0x30
 8003b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b66:	4422      	add	r2, r4
 8003b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b70:	3302      	adds	r3, #2
 8003b72:	e7c4      	b.n	8003afe <_printf_common+0x62>
 8003b74:	2301      	movs	r3, #1
 8003b76:	4622      	mov	r2, r4
 8003b78:	4639      	mov	r1, r7
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	47c0      	blx	r8
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d0e6      	beq.n	8003b50 <_printf_common+0xb4>
 8003b82:	f109 0901 	add.w	r9, r9, #1
 8003b86:	e7d7      	b.n	8003b38 <_printf_common+0x9c>

08003b88 <_printf_i>:
 8003b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b8c:	4617      	mov	r7, r2
 8003b8e:	7e0a      	ldrb	r2, [r1, #24]
 8003b90:	b085      	sub	sp, #20
 8003b92:	2a6e      	cmp	r2, #110	; 0x6e
 8003b94:	4698      	mov	r8, r3
 8003b96:	4606      	mov	r6, r0
 8003b98:	460c      	mov	r4, r1
 8003b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b9c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003ba0:	f000 80bc 	beq.w	8003d1c <_printf_i+0x194>
 8003ba4:	d81a      	bhi.n	8003bdc <_printf_i+0x54>
 8003ba6:	2a63      	cmp	r2, #99	; 0x63
 8003ba8:	d02e      	beq.n	8003c08 <_printf_i+0x80>
 8003baa:	d80a      	bhi.n	8003bc2 <_printf_i+0x3a>
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	f000 80c8 	beq.w	8003d42 <_printf_i+0x1ba>
 8003bb2:	2a58      	cmp	r2, #88	; 0x58
 8003bb4:	f000 808a 	beq.w	8003ccc <_printf_i+0x144>
 8003bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bbc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003bc0:	e02a      	b.n	8003c18 <_printf_i+0x90>
 8003bc2:	2a64      	cmp	r2, #100	; 0x64
 8003bc4:	d001      	beq.n	8003bca <_printf_i+0x42>
 8003bc6:	2a69      	cmp	r2, #105	; 0x69
 8003bc8:	d1f6      	bne.n	8003bb8 <_printf_i+0x30>
 8003bca:	6821      	ldr	r1, [r4, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003bd2:	d023      	beq.n	8003c1c <_printf_i+0x94>
 8003bd4:	1d11      	adds	r1, r2, #4
 8003bd6:	6019      	str	r1, [r3, #0]
 8003bd8:	6813      	ldr	r3, [r2, #0]
 8003bda:	e027      	b.n	8003c2c <_printf_i+0xa4>
 8003bdc:	2a73      	cmp	r2, #115	; 0x73
 8003bde:	f000 80b4 	beq.w	8003d4a <_printf_i+0x1c2>
 8003be2:	d808      	bhi.n	8003bf6 <_printf_i+0x6e>
 8003be4:	2a6f      	cmp	r2, #111	; 0x6f
 8003be6:	d02a      	beq.n	8003c3e <_printf_i+0xb6>
 8003be8:	2a70      	cmp	r2, #112	; 0x70
 8003bea:	d1e5      	bne.n	8003bb8 <_printf_i+0x30>
 8003bec:	680a      	ldr	r2, [r1, #0]
 8003bee:	f042 0220 	orr.w	r2, r2, #32
 8003bf2:	600a      	str	r2, [r1, #0]
 8003bf4:	e003      	b.n	8003bfe <_printf_i+0x76>
 8003bf6:	2a75      	cmp	r2, #117	; 0x75
 8003bf8:	d021      	beq.n	8003c3e <_printf_i+0xb6>
 8003bfa:	2a78      	cmp	r2, #120	; 0x78
 8003bfc:	d1dc      	bne.n	8003bb8 <_printf_i+0x30>
 8003bfe:	2278      	movs	r2, #120	; 0x78
 8003c00:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003c04:	496e      	ldr	r1, [pc, #440]	; (8003dc0 <_printf_i+0x238>)
 8003c06:	e064      	b.n	8003cd2 <_printf_i+0x14a>
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003c0e:	1d11      	adds	r1, r2, #4
 8003c10:	6019      	str	r1, [r3, #0]
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0a3      	b.n	8003d64 <_printf_i+0x1dc>
 8003c1c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003c20:	f102 0104 	add.w	r1, r2, #4
 8003c24:	6019      	str	r1, [r3, #0]
 8003c26:	d0d7      	beq.n	8003bd8 <_printf_i+0x50>
 8003c28:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	da03      	bge.n	8003c38 <_printf_i+0xb0>
 8003c30:	222d      	movs	r2, #45	; 0x2d
 8003c32:	425b      	negs	r3, r3
 8003c34:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c38:	4962      	ldr	r1, [pc, #392]	; (8003dc4 <_printf_i+0x23c>)
 8003c3a:	220a      	movs	r2, #10
 8003c3c:	e017      	b.n	8003c6e <_printf_i+0xe6>
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c46:	d003      	beq.n	8003c50 <_printf_i+0xc8>
 8003c48:	1d08      	adds	r0, r1, #4
 8003c4a:	6018      	str	r0, [r3, #0]
 8003c4c:	680b      	ldr	r3, [r1, #0]
 8003c4e:	e006      	b.n	8003c5e <_printf_i+0xd6>
 8003c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c54:	f101 0004 	add.w	r0, r1, #4
 8003c58:	6018      	str	r0, [r3, #0]
 8003c5a:	d0f7      	beq.n	8003c4c <_printf_i+0xc4>
 8003c5c:	880b      	ldrh	r3, [r1, #0]
 8003c5e:	4959      	ldr	r1, [pc, #356]	; (8003dc4 <_printf_i+0x23c>)
 8003c60:	2a6f      	cmp	r2, #111	; 0x6f
 8003c62:	bf14      	ite	ne
 8003c64:	220a      	movne	r2, #10
 8003c66:	2208      	moveq	r2, #8
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003c6e:	6865      	ldr	r5, [r4, #4]
 8003c70:	60a5      	str	r5, [r4, #8]
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	f2c0 809c 	blt.w	8003db0 <_printf_i+0x228>
 8003c78:	6820      	ldr	r0, [r4, #0]
 8003c7a:	f020 0004 	bic.w	r0, r0, #4
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d13f      	bne.n	8003d04 <_printf_i+0x17c>
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	f040 8095 	bne.w	8003db4 <_printf_i+0x22c>
 8003c8a:	4675      	mov	r5, lr
 8003c8c:	2a08      	cmp	r2, #8
 8003c8e:	d10b      	bne.n	8003ca8 <_printf_i+0x120>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	07da      	lsls	r2, r3, #31
 8003c94:	d508      	bpl.n	8003ca8 <_printf_i+0x120>
 8003c96:	6923      	ldr	r3, [r4, #16]
 8003c98:	6862      	ldr	r2, [r4, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bfde      	ittt	le
 8003c9e:	2330      	movle	r3, #48	; 0x30
 8003ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ca4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ca8:	ebae 0305 	sub.w	r3, lr, r5
 8003cac:	6123      	str	r3, [r4, #16]
 8003cae:	f8cd 8000 	str.w	r8, [sp]
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	aa03      	add	r2, sp, #12
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	4630      	mov	r0, r6
 8003cba:	f7ff feef 	bl	8003a9c <_printf_common>
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d155      	bne.n	8003d6e <_printf_i+0x1e6>
 8003cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc6:	b005      	add	sp, #20
 8003cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ccc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003cd0:	493c      	ldr	r1, [pc, #240]	; (8003dc4 <_printf_i+0x23c>)
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cda:	f100 0504 	add.w	r5, r0, #4
 8003cde:	601d      	str	r5, [r3, #0]
 8003ce0:	d001      	beq.n	8003ce6 <_printf_i+0x15e>
 8003ce2:	6803      	ldr	r3, [r0, #0]
 8003ce4:	e002      	b.n	8003cec <_printf_i+0x164>
 8003ce6:	0655      	lsls	r5, r2, #25
 8003ce8:	d5fb      	bpl.n	8003ce2 <_printf_i+0x15a>
 8003cea:	8803      	ldrh	r3, [r0, #0]
 8003cec:	07d0      	lsls	r0, r2, #31
 8003cee:	bf44      	itt	mi
 8003cf0:	f042 0220 	orrmi.w	r2, r2, #32
 8003cf4:	6022      	strmi	r2, [r4, #0]
 8003cf6:	b91b      	cbnz	r3, 8003d00 <_printf_i+0x178>
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	f022 0220 	bic.w	r2, r2, #32
 8003cfe:	6022      	str	r2, [r4, #0]
 8003d00:	2210      	movs	r2, #16
 8003d02:	e7b1      	b.n	8003c68 <_printf_i+0xe0>
 8003d04:	4675      	mov	r5, lr
 8003d06:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d0a:	fb02 3310 	mls	r3, r2, r0, r3
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d14:	4603      	mov	r3, r0
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d1f5      	bne.n	8003d06 <_printf_i+0x17e>
 8003d1a:	e7b7      	b.n	8003c8c <_printf_i+0x104>
 8003d1c:	6808      	ldr	r0, [r1, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	6949      	ldr	r1, [r1, #20]
 8003d22:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d26:	d004      	beq.n	8003d32 <_printf_i+0x1aa>
 8003d28:	1d10      	adds	r0, r2, #4
 8003d2a:	6018      	str	r0, [r3, #0]
 8003d2c:	6813      	ldr	r3, [r2, #0]
 8003d2e:	6019      	str	r1, [r3, #0]
 8003d30:	e007      	b.n	8003d42 <_printf_i+0x1ba>
 8003d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d36:	f102 0004 	add.w	r0, r2, #4
 8003d3a:	6018      	str	r0, [r3, #0]
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	d0f6      	beq.n	8003d2e <_printf_i+0x1a6>
 8003d40:	8019      	strh	r1, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	4675      	mov	r5, lr
 8003d48:	e7b1      	b.n	8003cae <_printf_i+0x126>
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	1d11      	adds	r1, r2, #4
 8003d4e:	6019      	str	r1, [r3, #0]
 8003d50:	6815      	ldr	r5, [r2, #0]
 8003d52:	6862      	ldr	r2, [r4, #4]
 8003d54:	2100      	movs	r1, #0
 8003d56:	4628      	mov	r0, r5
 8003d58:	f7fc fa3a 	bl	80001d0 <memchr>
 8003d5c:	b108      	cbz	r0, 8003d62 <_printf_i+0x1da>
 8003d5e:	1b40      	subs	r0, r0, r5
 8003d60:	6060      	str	r0, [r4, #4]
 8003d62:	6863      	ldr	r3, [r4, #4]
 8003d64:	6123      	str	r3, [r4, #16]
 8003d66:	2300      	movs	r3, #0
 8003d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d6c:	e79f      	b.n	8003cae <_printf_i+0x126>
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	462a      	mov	r2, r5
 8003d72:	4639      	mov	r1, r7
 8003d74:	4630      	mov	r0, r6
 8003d76:	47c0      	blx	r8
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d0a2      	beq.n	8003cc2 <_printf_i+0x13a>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	079b      	lsls	r3, r3, #30
 8003d80:	d507      	bpl.n	8003d92 <_printf_i+0x20a>
 8003d82:	2500      	movs	r5, #0
 8003d84:	f104 0919 	add.w	r9, r4, #25
 8003d88:	68e3      	ldr	r3, [r4, #12]
 8003d8a:	9a03      	ldr	r2, [sp, #12]
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	429d      	cmp	r5, r3
 8003d90:	db05      	blt.n	8003d9e <_printf_i+0x216>
 8003d92:	68e0      	ldr	r0, [r4, #12]
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	4298      	cmp	r0, r3
 8003d98:	bfb8      	it	lt
 8003d9a:	4618      	movlt	r0, r3
 8003d9c:	e793      	b.n	8003cc6 <_printf_i+0x13e>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	464a      	mov	r2, r9
 8003da2:	4639      	mov	r1, r7
 8003da4:	4630      	mov	r0, r6
 8003da6:	47c0      	blx	r8
 8003da8:	3001      	adds	r0, #1
 8003daa:	d08a      	beq.n	8003cc2 <_printf_i+0x13a>
 8003dac:	3501      	adds	r5, #1
 8003dae:	e7eb      	b.n	8003d88 <_printf_i+0x200>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1a7      	bne.n	8003d04 <_printf_i+0x17c>
 8003db4:	780b      	ldrb	r3, [r1, #0]
 8003db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dbe:	e765      	b.n	8003c8c <_printf_i+0x104>
 8003dc0:	08003f82 	.word	0x08003f82
 8003dc4:	08003f71 	.word	0x08003f71

08003dc8 <memcpy>:
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	1e43      	subs	r3, r0, #1
 8003dcc:	440a      	add	r2, r1
 8003dce:	4291      	cmp	r1, r2
 8003dd0:	d100      	bne.n	8003dd4 <memcpy+0xc>
 8003dd2:	bd10      	pop	{r4, pc}
 8003dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ddc:	e7f7      	b.n	8003dce <memcpy+0x6>

08003dde <memmove>:
 8003dde:	4288      	cmp	r0, r1
 8003de0:	b510      	push	{r4, lr}
 8003de2:	eb01 0302 	add.w	r3, r1, r2
 8003de6:	d803      	bhi.n	8003df0 <memmove+0x12>
 8003de8:	1e42      	subs	r2, r0, #1
 8003dea:	4299      	cmp	r1, r3
 8003dec:	d10c      	bne.n	8003e08 <memmove+0x2a>
 8003dee:	bd10      	pop	{r4, pc}
 8003df0:	4298      	cmp	r0, r3
 8003df2:	d2f9      	bcs.n	8003de8 <memmove+0xa>
 8003df4:	1881      	adds	r1, r0, r2
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	42d3      	cmn	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <memmove+0x20>
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e06:	e7f7      	b.n	8003df8 <memmove+0x1a>
 8003e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e0c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003e10:	e7eb      	b.n	8003dea <memmove+0xc>

08003e12 <_realloc_r>:
 8003e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e14:	4607      	mov	r7, r0
 8003e16:	4614      	mov	r4, r2
 8003e18:	460e      	mov	r6, r1
 8003e1a:	b921      	cbnz	r1, 8003e26 <_realloc_r+0x14>
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e22:	f7ff bc3f 	b.w	80036a4 <_malloc_r>
 8003e26:	b922      	cbnz	r2, 8003e32 <_realloc_r+0x20>
 8003e28:	f7ff fbee 	bl	8003608 <_free_r>
 8003e2c:	4625      	mov	r5, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e32:	f000 f814 	bl	8003e5e <_malloc_usable_size_r>
 8003e36:	4284      	cmp	r4, r0
 8003e38:	d90f      	bls.n	8003e5a <_realloc_r+0x48>
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f7ff fc31 	bl	80036a4 <_malloc_r>
 8003e42:	4605      	mov	r5, r0
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d0f2      	beq.n	8003e2e <_realloc_r+0x1c>
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	f7ff ffbc 	bl	8003dc8 <memcpy>
 8003e50:	4631      	mov	r1, r6
 8003e52:	4638      	mov	r0, r7
 8003e54:	f7ff fbd8 	bl	8003608 <_free_r>
 8003e58:	e7e9      	b.n	8003e2e <_realloc_r+0x1c>
 8003e5a:	4635      	mov	r5, r6
 8003e5c:	e7e7      	b.n	8003e2e <_realloc_r+0x1c>

08003e5e <_malloc_usable_size_r>:
 8003e5e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f1a0 0004 	sub.w	r0, r0, #4
 8003e68:	bfbc      	itt	lt
 8003e6a:	580b      	ldrlt	r3, [r1, r0]
 8003e6c:	18c0      	addlt	r0, r0, r3
 8003e6e:	4770      	bx	lr

08003e70 <_sbrk>:
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <_sbrk+0x14>)
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	4602      	mov	r2, r0
 8003e76:	b909      	cbnz	r1, 8003e7c <_sbrk+0xc>
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <_sbrk+0x18>)
 8003e7a:	6019      	str	r1, [r3, #0]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	4402      	add	r2, r0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	4770      	bx	lr
 8003e84:	20000154 	.word	0x20000154
 8003e88:	200007b8 	.word	0x200007b8

08003e8c <_init>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr

08003e98 <_fini>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr
